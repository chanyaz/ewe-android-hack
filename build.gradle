// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext.kotlin_version = '1.0.6'
    ext.kotlin_version = '1.0.5'
    ext.okhttp_version = '3.3.1'
    ext.rxjava_version = '1.2.1'

    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath 'io.fabric.tools:gradle:1.21.4'
        classpath 'com.android.tools.build:gradle:2.2.3'
        classpath 'com.github.JakeWharton:sdk-manager-plugin:220bf7a88a7072df3ed16dc8466fb144f2817070'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.7'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
        classpath('com.shazam.fork:fork-gradle-plugin:1.2.0') {
            exclude group: 'com.google.guava'
        }
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.12.0'
        classpath "net.rdrei.android.buildtimetracker:gradle-plugin:0.5.0"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: "build-time-tracker"
buildtimetracker {
    reporters {
        summary {
            ordered false
            threshold 500
            barstyle "unicode"
        }
    }
}


apply plugin: 'com.github.ben-manes.versions'

// Sub-projects/library projects will refer to these top-level SDK and buildTools versions

ext.supportLibVersion = "23.4.0"
ext.googlePlayServicesVersion = "8.4.0"

ext.compileSdkVersion = 24
ext.buildToolsVersion = "24.0.0"

ext.preDexLibs = !project.hasProperty('disablePreDex')

subprojects {
    project.plugins.whenPluginAdded { plugin ->
        if ("com.android.build.gradle.AppPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        } else if ("com.android.build.gradle.LibraryPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        }
    }

    tasks.withType(AbstractCompile) {
        def ignoreWarning = ["Using experimental kotlin incremental compilation",
                             "[org.jetbrains.kotlin.gradle.tasks.KotlinCompile_Decorated] w: Classpath entry points to a non-existent location:"]
        def outputEvents = []
        def listener = new StandardOutputListener() {
            void onOutput(CharSequence output) {
                outputEvents << output
            }
        };
        doFirst {
            getLogging().addStandardErrorListener(listener)
        }
        doLast {
            getLogging().removeStandardErrorListener(listener)
            outputEvents.each { e ->
                def valid = ignoreWarning.findAll { a ->
                    ignoreWarning.any { e.toString().contains(a) }
                }
                if(e.toString() =~ /^\[WARN\]/ && !valid) {
                    throw new GradleException("Please fix the compilation warnings so the project stays warnings-free!" + e.toString());
                }
            }
        }
    }

    tasks.withType(Test) {
        // parallelizing to 2 processes seems to give ~20% speed boost
        maxParallelForks = 2
        // need more memory for unittests due to issue with Robolectric 1.3: https://github.com/robolectric/robolectric/issues/1700
        jvmArgs '-XX:MaxPermSize=512m'
    }

}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = selection.candidate.version ==~ /(?i).*[.-]alpha[.\d-]*/
            if (rejected) {
                selection.reject('alpha versions not allowed')
            }
        }
    }
}

allprojects {
    repositories {
        jcenter()
    }
}