// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext.gradle_version = '3.1.0'
    ext.kotlin_version = '1.2.41'
    ext.okhttp_version = '3.10.0'
    ext.retrofit_version = '2.4.0'
    ext.rxjava_version = '2.1.5'
    ext.dagger_version = '2.14.1'
    ext.robolectric_version = '3.6.1'
    ext.room_persistence_version = '1.0.0'
    ext.checkstyle_version = '8.8'
    ext.lifecyle_version = '1.1.1'
    ext.mockito_version = '2.19.0'

    repositories {
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'https://jitpack.io' }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        google()
        jcenter()
    }
    dependencies {
        classpath 'io.fabric.tools:gradle:1.25.2'
        classpath "com.android.tools.build:gradle:${gradle_version}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
        classpath('com.shazam.fork:fork-gradle-plugin:3.3.0') {
            exclude group: 'com.google.guava'
        }
        classpath "com.shazam.fork:fork-reporter-jenkins-gradle-plugin:3.3.0"
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
        classpath "net.rdrei.android.buildtimetracker:gradle-plugin:0.11.0"
        classpath 'com.google.gms:google-services:4.0.1'
        classpath 'org.codehaus.groovy:groovy-all:2.4.12'
        classpath 'com.jakewharton:butterknife-gradle-plugin:9.0.0-SNAPSHOT'
    }
}

apply plugin: "build-time-tracker"

buildtimetracker {
    reporters {
        csv {
            output "build/times.csv"
            append false
            header true
        }
    }
}

gradle.buildFinished {
    def scriptPath = "jenkins/time_tracker_logging.rb"
    def buildNameForClientLog = project.gradle.startParameter.taskNames.join('_')
    boolean build_cache = project.gradle.startParameter.buildCacheEnabled
    if (build_cache)
        buildNameForClientLog = "build_cache_" + buildNameForClientLog
    def command = "ruby $scriptPath $buildNameForClientLog"
    println command
    println command.execute().text
}

configurations.all {

    resolutionStrategy {
        force 'android.arch.lifecycle:livedata-core:1.1.1'
    }

}

apply plugin: 'com.github.ben-manes.versions'

// Sub-projects/library projects will refer to these top-level SDK and buildTools versions

ext.supportLibVersion = "27.1.1"

ext.compileSdkVersion = 26
ext.buildToolsVersion = "27.0.3"

ext.preDexLibs = !project.hasProperty('disablePreDex')

subprojects {
    project.plugins.whenPluginAdded { plugin ->
        if ("com.android.build.gradle.AppPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        } else if ("com.android.build.gradle.LibraryPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        }
    }

    tasks.withType(AbstractCompile) {
        def ignoreWarning = ["Using experimental kotlin incremental compilation",
                             "[org.jetbrains.kotlin.gradle.tasks.KotlinCompile_Decorated] w: Classpath entry points to a non-existent location:"]
        def outputEvents = []
        def listener = new StandardOutputListener() {
            void onOutput(CharSequence output) {
                outputEvents << output
            }
        };
        doFirst {
            getLogging().addStandardErrorListener(listener)
        }
        doLast {
            getLogging().removeStandardErrorListener(listener)
            outputEvents.each { e ->
                def valid = ignoreWarning.findAll { a ->
                    ignoreWarning.any { e.toString().contains(a) }
                }
                if(e.toString() =~ /^\[WARN\]/ && !valid) {
                    throw new GradleException("Please fix the compilation warnings so the project stays warnings-free!" + e.toString());
                }
            }
        }
    }

    tasks.withType(Test) {
        maxParallelForks = 3
        testLogging {
            def buildNumber = "${System.env.BUILD_NUMBER}"
            def verboseLogging = buildNumber != null && !buildNumber.isEmpty() && buildNumber != "null"
            // set options for log level LIFECYCLE
            if (verboseLogging) {
                events "passed", "skipped", "failed", "standardOut"
                showExceptions true
                exceptionFormat "full"
                showCauses true
                showStackTraces true

                // set options for log level DEBUG and INFO
                debug {
                    events "started", "passed", "skipped", "failed", "standardOut", "standardError"
                    exceptionFormat "full"
                }
                info.events = debug.events
                info.exceptionFormat = debug.exceptionFormat

                afterTest { desc, result ->
                    def runtime = (result.endTime - result.startTime)
                    if (runtime > 1000) {
                        println(" >>> SLOW TEST (${runtime} ms) <<< ${desc.className}.${desc.name}")
                    }
                }
            }

            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def results = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                    def runtime = "Run time: ${(result.endTime - result.startTime) / 1000} seconds"
                    def startItem = '|  ', endItem = '  |'
                    def dashRepeatCount = startItem.length() + results.length() + endItem.length()
                    def spaceRepeatCount = results.length() - runtime.length()
                    println('\n' + ('-' * dashRepeatCount) + '\n' + startItem + results + endItem + '\n' + startItem + runtime + (' ' * spaceRepeatCount) + endItem + '\n' + ('-' * dashRepeatCount))
                }
            }
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions.allWarningsAsErrors = true
    }

}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = selection.candidate.version ==~ /(?i).*[.-]alpha[.\d-]*/
            if (rejected) {
                selection.reject('alpha versions not allowed')
            }
        }
    }
}


allprojects {
    repositories {
        google()
        jcenter()
    }
}


configurations {
    ktlint
}


dependencies {
    ktlint 'com.github.shyiko:ktlint:0.15.0'
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style"

    def inputFiles = fileTree(dir: "lib", include: "*/src/**/*.kt") + fileTree(dir: "project", include: "src/**/*.kt")
    def outputFile = "${buildDir}/ktlint.xml"
    inputs.files(inputFiles)
    outputs.file(outputFile)

    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "lib/*/src/**/*.kt", "project/src/**/*.kt", "--reporter=plain", "--reporter=checkstyle,output=${outputFile}"
}

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations"
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "-F", "lib/*/src/**/*.kt", "project/src/**/*.kt"
}
