// src: https://blog.gouline.net/2015/06/23/code-coverage-on-android-with-jacoco/

apply plugin: 'jacoco'

jacoco {  
    toolVersion = "0.7.2.201409121644"
}

coveralls {
    sourceDirs = ["project/src/main/java", "project/src/expedia/java", "project/src/debug/java"]
    jacocoReportPath 'project/build/reports/jacoco/jacocoExpediaDebug/jacocoExpediaDebug.xml'
}

project.afterEvaluate {  
    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type -> type.name }
    def productFlavors = android.productFlavors.collect { flavor -> flavor.name }

    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')

    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }
            def testTaskName = "test${sourceName.capitalize()}UnitTest"

            // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
            task "jacoco${sourceName.capitalize()}" (type:JacocoReport, dependsOn: "$testTaskName") {
                group = "Reporting"
                description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                def javaTree = fileTree(
                        dir: "${project.buildDir}/intermediates/classes/${sourcePath}",
                        excludes: ['**/*$special*.*',
                                   '**/*$inlined*.*',
                                   '**/R.class',
                                   '**/R$*.class',
                                   '**/*$ViewInjector*.*',
                                   '**/*$ViewBinder*.*',
                                   '**/BuildConfig.*',
                                   '**/Manifest*.*',
                                   '**/*test*/**',
                                   '**/*Test*.*']
                )

                def kotlinDebugTree = fileTree(
                        dir: "${project.buildDir}/tmp/kotlin-classes",
                        excludes: ['**/*test*/**',
                                   '**/*Test*.*']
                )

                classDirectories = javaTree + kotlinDebugTree

                def coverageSourceDirs = [
                        "src/main/java",
                        "src/$productFlavorName/java",
                        "src/$buildTypeName/java"
                ]

                additionalSourceDirs = files(coverageSourceDirs)
                sourceDirectories = files(coverageSourceDirs)
                executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")

                reports {
                    xml.enabled = true
                    html.enabled = true
                }
            }
        }
    }
}
