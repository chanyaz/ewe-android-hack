package com.expedia.bookings.hotel.deeplink

import android.content.Context
import android.location.Location
import com.expedia.bookings.R
import com.expedia.bookings.data.DeprecatedHotelSearchParams
import com.expedia.bookings.data.SuggestionV4
import com.expedia.bookings.data.hotels.HotelSearchParams
import com.expedia.bookings.hotel.util.HotelSuggestionManager
import com.expedia.bookings.location.CurrentLocationObservable
import io.reactivex.Observer
import io.reactivex.observers.DisposableObserver
import io.reactivex.subjects.PublishSubject

class HotelDeepLinkHandler(private val context: Context,
                           private val suggestionManager: HotelSuggestionManager) {

    val hotelSearchDeepLinkSubject = PublishSubject.create<HotelSearchParams>()
    val hotelIdToDetailsSubject = PublishSubject.create<HotelSearchParams>()
    val hotelIdToResultsSubject = PublishSubject.create<HotelSearchParams>()

    val deepLinkInvalidSubject = PublishSubject.create<Unit>()

    fun handleNavigationViaDeepLink(hotelSearchParams: HotelSearchParams?,
                                    landingPage: HotelLandingPage?) {
        if (hotelSearchParams != null) {
            val lat = hotelSearchParams.suggestion.coordinates?.lat ?: 0.0
            val lon = hotelSearchParams.suggestion.coordinates?.lng ?: 0.0
            // explicit check against MY_LOCATION is required here because current logic in SuggestionV4.isCurrentLocationSearch does not
            // yield correct answer for DeprecatedHotelSearchParams generated by deep links
            val isCurrentLocationSearch = DeprecatedHotelSearchParams.SearchType.MY_LOCATION.name.equals(hotelSearchParams.suggestion.type)
            if (isCurrentLocationSearch) {
                hotelSearchParams.suggestion.regionNames?.displayName = context.getString(R.string.current_location)
                hotelSearchParams.suggestion.regionNames?.shortName = context.getString(R.string.current_location)
                if (lat == 0.0 && lon == 0.0)
                    CurrentLocationObservable.create(context).subscribe(generateLocationServiceCallback(hotelSearchParams))
                else {
                    hotelSearchDeepLinkSubject.onNext(hotelSearchParams)
                }
            } else {
                if (hotelSearchParams.suggestion.hotelId != null) {
                    handleHotelIdDeepLink(hotelSearchParams, landingPage)
                } else if (hotelSearchParams.suggestion.gaiaId != null || lat != 0.0 || lon != 0.0) {
                    hotelSearchDeepLinkSubject.onNext(hotelSearchParams)
                } else {
                    handleSuggestionLookup(hotelSearchParams)
                }
            }
        }
    }

    private fun handleHotelIdDeepLink(params: HotelSearchParams, landingPage: HotelLandingPage?) {
        if (landingPage == HotelLandingPage.RESULTS) {
            hotelIdToResultsSubject.onNext(params)
        } else {
            hotelIdToDetailsSubject.onNext(params)
        }
    }

    private fun handleSuggestionLookup(hotelSearchParams: HotelSearchParams) {
        suggestionManager.suggestionReturnSubject.subscribe { suggestion ->
            hotelSearchParams.suggestion.gaiaId = suggestion.gaiaId
            hotelSearchDeepLinkSubject.onNext(hotelSearchParams)
        }
        suggestionManager.errorSubject.subscribe {
            deepLinkInvalidSubject.onNext(Unit)
        }

        val displayName = hotelSearchParams.suggestion.regionNames?.displayName ?: ""
        if (displayName.length > 0 ) {
            // get suggestion for searched location
            suggestionManager.fetchHotelSuggestions(context, displayName)
        } else {
            deepLinkInvalidSubject.onNext(Unit)
        }
    }

    private fun generateLocationServiceCallback(hotelSearchParams: HotelSearchParams?): Observer<Location> {
        return object : DisposableObserver<Location>() {
            override fun onNext(location: Location) {
                val coordinate = SuggestionV4.LatLng()
                coordinate.lat = location.latitude
                coordinate.lng = location.longitude
                hotelSearchParams?.suggestion?.coordinates = coordinate
                hotelSearchDeepLinkSubject.onNext(hotelSearchParams!!)
            }

            override fun onComplete() {
                // ignore
            }

            override fun onError(e: Throwable) {
                deepLinkInvalidSubject.onNext(Unit)
            }
        }
    }
}
