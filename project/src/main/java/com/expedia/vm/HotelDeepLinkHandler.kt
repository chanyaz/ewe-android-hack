package com.expedia.vm

import android.content.Context
import android.location.Location
import com.expedia.bookings.R
import com.expedia.bookings.data.SuggestionV4
import com.expedia.bookings.data.hotels.HotelSearchParams
import com.expedia.bookings.location.CurrentLocationObservable
import com.expedia.bookings.presenter.hotel.HotelPresenter
import com.expedia.ui.HotelActivity
import com.mobiata.android.Log
import rx.Observer

class HotelDeepLinkHandler(private val context: Context, private val deepLinkSearchObserver: Observer<HotelSearchParams?>,
                           private val suggestionLookupObserver: Observer<Pair<String, Observer<List<SuggestionV4>>>>,
                           private val currentLocationSearchObserver: Observer<HotelSearchParams?>,
                           private val hotelPresenter: HotelPresenter,
                           private val searchSuggestionObserver: Observer<SuggestionV4>) {

    fun handleNavigationViaDeepLink(hotelSearchParams: HotelSearchParams?) {
        if (hotelSearchParams != null) {
            val lat = hotelSearchParams.suggestion.coordinates?.lat ?: 0.0
            val lon = hotelSearchParams.suggestion.coordinates?.lng ?: 0.0
            // explicit check against MY_LOCATION is required here because current logic in SuggestionV4.isCurrentLocationSearch does not
            // yield correct answer for HotelSearchParams generated by deep links
            val isCurrentLocationSearch = com.expedia.bookings.data.HotelSearchParams.SearchType.MY_LOCATION.name.equals(hotelSearchParams.suggestion.type)
            if (isCurrentLocationSearch) {
                hotelSearchParams.suggestion.regionNames?.displayName = context.getString(R.string.current_location)
                hotelSearchParams.suggestion.regionNames?.shortName = context.getString(R.string.current_location)
                if (lat == 0.0 && lon == 0.0)
                    CurrentLocationObservable.create(context).subscribe(generateLocationServiceCallback(hotelSearchParams))
                else {
                    currentLocationSearchObserver.onNext(hotelSearchParams)
                }
            } else {
                searchSuggestionObserver.onNext(hotelSearchParams.suggestion)
                if (hotelSearchParams.suggestion.hotelId != null) {
                    // go to specific hotel requested
                    deepLinkSearchObserver.onNext(hotelSearchParams)
                    hotelPresenter.setDefaultTransition(HotelActivity.Screen.DETAILS)
                } else if (hotelSearchParams.suggestion.gaiaId != null || lat != 0.0 || lon != 0.0) {
                    // search specified region or lat/lon
                    hotelPresenter.setDefaultTransition(HotelActivity.Screen.RESULTS)
                    deepLinkSearchObserver.onNext(hotelSearchParams)
                } else {
                    val displayName = hotelSearchParams.suggestion.regionNames?.displayName ?: ""
                    if (displayName.length > 0 ) {
                        // get suggestion for searched location
                        suggestionLookupObserver.onNext(Pair(displayName, generateSuggestionServiceCallback(hotelSearchParams)))
                    } else {
                        // this should not happen unless something has gone very wrong, so just send user to search screen
                        hotelPresenter.setDefaultTransition(HotelActivity.Screen.SEARCH)
                    }
                }
            }

        }
    }

    private fun generateLocationServiceCallback(hotelSearchParams: HotelSearchParams?): Observer<Location> {
        return object : Observer<Location> {
            override fun onNext(location: Location) {
                val coordinate = SuggestionV4.LatLng()
                coordinate.lat = location.latitude
                coordinate.lng = location.longitude
                hotelSearchParams?.suggestion?.coordinates = coordinate
                currentLocationSearchObserver.onNext(hotelSearchParams)
            }

            override fun onCompleted() {
                // ignore
            }

            override fun onError(e: Throwable?) {
                hotelPresenter.setDefaultTransition(HotelActivity.Screen.SEARCH)
            }
        }
    }

    private fun generateSuggestionServiceCallback(hotelSearchParams: HotelSearchParams): Observer<List<SuggestionV4>> {
        return object : Observer<List<SuggestionV4>> {
            override fun onNext(essSuggestions: List<SuggestionV4>) {
                hotelPresenter.setDefaultTransition(HotelActivity.Screen.RESULTS)
                hotelSearchParams.suggestion.gaiaId = essSuggestions.first().gaiaId
                deepLinkSearchObserver.onNext(hotelSearchParams)
                searchSuggestionObserver.onNext(hotelSearchParams.suggestion)
            }

            override fun onCompleted() {
            }

            override fun onError(e: Throwable?) {
                hotelPresenter.setDefaultTransition(HotelActivity.Screen.SEARCH)
                Log.e("Hotel Suggestions Error", e)
            }
        }
    }
}
