def shouldRunProguard = GradleUtil.shouldEnableProguard(project)
def featureName = GradleUtil.getFeatureName(project)
def gitRev = GradleUtil.getGitRevision()

def CHANGELOG_PATH = "changelog.txt"
def CRASHLYTICS_BETA_GROUPS_PATH = "buildbot/crashlytics_beta_groups.txt"

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'checkstyle'

repositories {
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }
    maven { url 'http://www.leanplum.com/leanplum-sdks/' }
}

dependencies {
    compile fileTree(dir: 'libs', include: [
            'activeandroid-20131111.jar',
            'admsAppLibrary-3.0.5.jar',
            'adxtag3.2.6.jar',
    ])
    compile project(':lib:FacebookSdk:facebook')
    compile project(':lib:FlightLib')
    compile project(':lib:svg-android:svgandroid')
    compile project(':lib:Utils')
    compile project(':lib:ShareEverywhere:shareeverywhere')
    compile project(':lib:AndroidTime')
    // We keep some classes in a pure java project so we can test them with pure jvm unit tests
    compile (project(':lib:ExpediaBookings')) {
        exclude group: 'joda-time'
    }

    // Google Play Services includes the support lib transitively
    compile "com.google.android.gms:play-services:${rootProject.ext.googlePlayServicesVersion}"

    compile 'com.squareup.okhttp:okhttp:2.0.0'
    compile 'com.squareup:otto:1.3.4'
    compile 'com.google.code.gson:gson:2.3'
    compile 'com.leanplum:Leanplum:1.2.6'

    compile ('com.crashlytics.sdk.android:crashlytics:2.0.1@aar') {
        transitive = true
    }

    androidTestCompile 'com.jakewharton.espresso:espresso:1.1-r3'
    androidTestCompile 'com.squareup.spoon:spoon-client:1.1.1'
    androidTestCompile('com.squareup.okhttp:mockwebserver:2.0.0') {
        exclude group: 'com.squareup.okhttp'
    }
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    testBuildType "latest"


    dexOptions {
        javaMaxHeapSize "2g"
    }

    lintOptions {
        checkReleaseBuilds false
        showAll true
    }

    packagingOptions {
        exclude 'LICENSE.txt'
    }

    defaultConfig {
        versionCode 1
        versionName "undefined"

        minSdkVersion 15
        targetSdkVersion 21

        multiDexEnabled = true
        testApplicationId "com.expedia.bookings.test"
        testInstrumentationRunner "com.expedia.bookings.test.ui.utils.SpoonInstrumentationTestRunner"

        buildConfigField "boolean", "IS_EXPEDIA", "false"
        buildConfigField "boolean", "IS_VSC", "false"
        buildConfigField "boolean", "IS_TRAVELOCITY", "false"
        buildConfigField "boolean", "IS_AAG", "false"

        buildConfigField "String", "MEDIA_URL", "\"http://media.expedia.com\""
        buildConfigField "String", "GIT_REVISION",  "\"${gitRev}\""
        buildConfigField "String", "BUILD_NUMBER",  "\"${System.env.BUILD_NUMBER}\""

        // Explicitly define the languages we use so GPS and other libraries doesn't include unnecessary ones
        resConfigs "da", "de", "en_CA", "en_GB", "es", "es_ES", "fr", "fr_CA", "in", "it", "ja", "ko", "nb", "nl", "pt_BR", "sv", "th", "vi", "zh", "zh_HK", "zh_TW"
    }

    productFlavors {
        expedia {
            buildConfigField "boolean", "IS_EXPEDIA", "true"
            buildConfigField "String", "MEDIA_URL", "\"http://media.expedia.com\""
            applicationId "com.expedia.bookings"
            versionCode 42
            versionName "4.2.1"
        }

        voyages {
            buildConfigField "boolean", "IS_VSC", "true"
            buildConfigField "String", "MEDIA_URL", "\"http://media.expedia.com\""
            applicationId "com.expedia.bookings.vsc"
            versionCode 1
            versionName "1.0"
        }

        travelocity {
            buildConfigField "boolean", "IS_TRAVELOCITY", "true"
            buildConfigField "String", "MEDIA_URL", "\"http://images.trvl-media.com\""
            applicationId "com.travelocity.android"
            versionCode 1003
            versionName "6.2-${versionCode}"
        }

        airAsiaGo {
            buildConfigField "boolean", "IS_AAG", "true"
            buildConfigField "String", "MEDIA_URL", "\"http://media.expedia.com\""
            applicationId "com.airasiago.android"
            versionCode 2
            versionName "2.0"
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"

            minifyEnabled false
            proguardFile file('proguard.cfg')
        }

        latest.initWith(buildTypes.debug)
        latest {
            minifyEnabled shouldRunProguard

            applicationIdSuffix ".latest"

            ext.betaDistributionReleaseNotesFilePath = CHANGELOG_PATH
            ext.betaDistributionGroupAliasesFilePath = CRASHLYTICS_BETA_GROUPS_PATH
        }

        feature.initWith(buildTypes.debug)
        feature {
            minifyEnabled shouldRunProguard

            applicationIdSuffix (".feature." + featureName)

            ext.betaDistributionReleaseNotesFilePath = CHANGELOG_PATH
            ext.betaDistributionGroupAliasesFilePath = CRASHLYTICS_BETA_GROUPS_PATH
        }

        release {
            minifyEnabled true
            proguardFile file('proguard.cfg')
        }
    }

    sourceSets {
        latest {
            manifest.srcFile 'src/debug/AndroidManifest.xml'
            java.srcDirs = ['src/debug/java']
        }

        feature {
            java.srcDirs = ['src/debug/java']
        }

        signingConfigs {
            debug {
                storeFile file("../common/debug.keystore")
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    checkstyle {
        toolVersion = '5.7'
    }

    task checkstyle(type: Checkstyle) {
        configFile file('../common/checkstyle.xml')
        source 'src/'
        include '**/*.java'

        // These files are from outside our project
        exclude (
            '**/AdapterView.java',
            '**/gl/*.java',
            '**/Gallery.java',
            '**/AbsSpinner.java',
            '**/GLTagProgressBar.java',
            '**/CustomEditText.java',
            '**/SocketActivityHierarchyServer.java',
        )

        classpath = files()
        ignoreFailures = true
    }
}

public class GradleUtil {
    static def isDefined(s) {
        return s != null && !s.isEmpty() && s != "null"
    }

    static def shouldEnableProguard(Project project) {
        def buildNumber = "${System.env.BUILD_NUMBER}"
        def boolean shouldRunProguard = false

        // If BUILD_NUMBER defined turn on proguard
        if (isDefined(buildNumber)) {
            shouldRunProguard = true
        }

        // This setting supercedes BUILD_NUMBER
        if (project.hasProperty("runProguard")) {
            shouldRunProguard = project.getProperty("runProguard").toBoolean()
        }

        return shouldRunProguard;
    }

    static def getPropertyWithDefault(Project project, String key, String thedefault) {
        if (project.hasProperty(key)) {
            return project.getProperty(key).toString()
        }

        return thedefault
    }

    static def getFeatureName(Project project) {
        return getPropertyWithDefault(project, "featureName", "none")
    }

    static def getAppName(Project project, variant) {
        // Don't touch release builds
        if (variant.buildType.name == "release") {
            return null
        }

        def flavor = variant.productFlavors.get(0).name
        flavor = flavor.capitalize()

        def type = variant.buildType.name
        if (type == "feature") {
            type = getFeatureName(project)
        }
        type = type.capitalize()

        return flavor + " " + type
    }

    static def getGitRevision() {
        def hash = "git rev-parse --short HEAD".execute().text.trim()
        def hasLocalChanges = "git diff --raw".execute().text
        if (hasLocalChanges) {
            hash = "!" + hash
        }
        return hash
    }
}

def releaseAccountTokens = [
    'com.expedia.bookings' : 'expedia.tuid',
    'com.expedia.bookings.vsc' : 'vsc.tuid',
    'com.travelocity.android' : 'travelocity.tuid',
]

android.applicationVariants.all { variant ->
    // We released apps with the following tokens so we should maintain them so people don't get logged out
    def token = releaseAccountTokens[variant.applicationId]
    if (!GradleUtil.isDefined(token)) {
        token = "${variant.applicationId}.tuid"
    }
    variant.resValue "string", "expedia_account_token_type_tuid_identifier", "${token}"
    variant.resValue "string", "expedia_account_type_identifier", "${variant.applicationId}"

    variant.resValue "string", "authority_autocomplete_hotel", "${variant.applicationId}.autocomplete.hotel"
    variant.resValue "string", "authority_autocomplete_airport", "${variant.applicationId}.autocomplete.airport"
    variant.resValue "string", "authority_autocomplete_suggestions", "${variant.applicationId}.suggestions"
    variant.resValue "string", "authority_account_sync", "${variant.applicationId}.account.sync"

    def launcherName = GradleUtil.getAppName(project, variant)
    if (!GradleUtil.isDefined(launcherName)) {
        // Must be a release build, so we default to app_name
        launcherName = "@string/app_name"
    }
    variant.resValue "string", "launcher_name", "${launcherName}"
}
