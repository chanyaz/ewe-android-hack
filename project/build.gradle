def shouldRunProguard = GradleUtil.shouldEnableProguard(project)
def gitRev = GradleUtil.getGitRevision()

def CHANGELOG_PATH = "changelog.txt"
def CRASHLYTICS_BETA_GROUPS_PATH = "buildbot/crashlytics_beta_groups.txt"

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'io.fabric'
apply plugin: 'checkstyle'
apply plugin: 'com.shazam.fork'
apply from: '../jacoco.gradle'

repositories {
    jcenter()
    maven { url 'https://maven.fabric.io/public' }
    maven {
        url "s3://mobiata-maven/release"
        credentials(AwsCredentials) {
            accessKey AWS_ACCESS_KEY
            secretKey AWS_SECRET_KEY
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: [
            'activeandroid-20131111.jar',
            'ADMS_AppLibrary-3.2.7-Android.jar',
    ])
    compile project(':lib:AndroidTime')
    debugCompile project(':lib:bug-reporter:bugshaker')
    // We keep some classes in a pure java project so we can test them with pure jvm unit tests
    compile (project(':lib:ExpediaBookings')) {
        exclude group: 'org.json'
    }
    compile 'com.expedia:svg-android:1.0.0'
    compile 'com.expedia:android-account-lib:1.1.18'
    compile 'com.mobiata:android-utils:1.2.1'
    compile 'com.dgmltn:share-everywhere:1.0.1'
    compile "org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}"
    testCompile "org.jetbrains.kotlin:kotlin-test:${kotlin_version}"
    compile 'com.google.maps.android:android-maps-utils:0.4.3'

    // Google Play Services deps on the support lib
    // however we add it here so the android-sdk-manager plugin behaves

    compile "com.android.support:support-v4:${rootProject.ext.supportLibVersion}"
    compile "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    compile "com.android.support:palette-v7:${rootProject.ext.supportLibVersion}"
    compile "com.android.support:gridlayout-v7:${rootProject.ext.supportLibVersion}"
    compile "com.android.support:recyclerview-v7:${rootProject.ext.supportLibVersion}"
    compile "com.android.support:cardview-v7:${rootProject.ext.supportLibVersion}"
    compile "com.android.support:support-annotations:${rootProject.ext.supportLibVersion}"
    compile "com.android.support:design:${rootProject.ext.supportLibVersion}"

    compile "com.google.android.gms:play-services-maps:${rootProject.ext.googlePlayServicesVersion}"
    compile "com.google.android.gms:play-services-location:${rootProject.ext.googlePlayServicesVersion}"

    compile 'com.squareup.picasso:picasso:2.5.2'
    compile "com.squareup.okhttp3:okhttp:${okhttp_version}"
    compile "com.squareup.okhttp3:okhttp-urlconnection:${okhttp_version}"
    compile 'com.jakewharton.picasso:picasso2-okhttp3-downloader:1.1.0'
    compile 'com.squareup.okio:okio:1.11.0'
    compile 'com.squareup:otto:1.3.8'
    compile 'com.squareup.phrase:phrase:1.1.0'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'com.jakewharton:butterknife:6.1.0'
    compile 'io.reactivex:rxandroid:1.2.1'
    compile "io.reactivex:rxjava:${rxjava_version}"
    compile 'com.jakewharton.rxbinding:rxbinding:0.4.0'
    compile 'com.facebook.android:facebook-android-sdk:4.16.1'

    compile ('com.tune:tune-marketing-console-sdk:4.10.1') {
        exclude group: 'com.android.support', module: 'support-v4'
    }
    compile ('com.wefika:flowlayout:0.4.0') {
        exclude group: 'com.intellij'
    }

    // Dagger 2.6.1
    compile 'com.google.dagger:dagger:2.6.1'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.6.1'
    provided 'org.glassfish:javax.annotation:10.0-b28'

    compile ('com.crashlytics.sdk.android:crashlytics:2.6.6@aar') {
        transitive = true
    }

    // Debug dependencies
//    def leakCanaryVersion = '1.3.1'
//    debugCompile "com.squareup.leakcanary:leakcanary-android:${leakCanaryVersion}"
//    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:${leakCanaryVersion}"

    // junit is only for mockwebserver
    debugCompile "com.squareup.okhttp3:mockwebserver:${okhttp_version}"
    debugCompile 'junit:junit:4.12'
    debugCompile (project(':lib:mocked:mocke3')) {
        transitive = false
    }

    def stethoVersion = '1.4.2'
    debugCompile "com.facebook.stetho:stetho:${stethoVersion}"
    debugCompile "com.facebook.stetho:stetho-okhttp3:${stethoVersion}"

    def chuckVersion='1.0.4'
    debugCompile ("com.readystatesoftware.chuck:library:${chuckVersion}"){
        exclude group: 'com.android.support'
    }
    debugCompile "com.squareup.okhttp3:logging-interceptor:${okhttp_version}"

    // Test dependencies
    testCompile 'junit:junit:4.12'
    def roboVersion = '3.2.2'
    testCompile "org.robolectric:robolectric:${roboVersion}"
    testCompile "org.robolectric:shadows-multidex:${roboVersion}"
    testCompile "org.robolectric:shadows-support-v4:${roboVersion}"
    testCompile 'org.mockito:mockito-core:2.0.31-beta'
    testCompile 'org.khronos:opengl-api:gl1.1-android-2.1_r1' // required to fill robolectric gap: https://github.com/robolectric/robolectric/issues/1932

    def espressoVersion = '2.2.2'
    androidTestCompile ("com.android.support.test.espresso:espresso-core:${espressoVersion}"){
        exclude group: 'com.android.support'
        exclude group: 'javax.inject'
    }
    androidTestCompile ("com.android.support.test.espresso:espresso-contrib:${espressoVersion}"){
        exclude group: 'com.android.support'
        exclude group: 'javax.inject'
    }

    androidTestCompile ('com.android.support.test:rules:0.5') {
        exclude group: 'com.android.support'
    }
    androidTestCompile ("com.android.support.test.espresso:espresso-intents:${espressoVersion}") {
        exclude group: 'com.android.support'
    }

    androidTestCompile fileTree(dir: 'libs', include: [
            'spoon-client-1.1.3-EXP.jar',
    ])
    androidTestCompile "com.google.dexmaker:dexmaker-mockito:1.2"
    androidTestCompile 'info.cukes:cucumber-android:1.2.0@jar'
    androidTestCompile 'info.cukes:cucumber-picocontainer:1.2.0'
    androidTestCompile 'info.cukes:cucumber-html:0.2.3'
    androidTestCompile "tools.fastlane:screengrab:0.5.5"
    androidTestCompile "com.android.support:support-annotations:${rootProject.ext.supportLibVersion}"
    androidTestCompile 'com.linkedin.testbutler:test-butler-library:1.2.0'
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    useLibrary 'org.apache.http.legacy'

    dexOptions {
        javaMaxHeapSize "2g"
    }

    lintOptions {
        checkReleaseBuilds false
        showAll true
        lintConfig file("lint.xml")
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    signingConfigs {
        debug {
            storeFile file("../common/debug.keystore")
        }

        release {
            /*
             We will provide value to these keys using -P commandline option of gradle
            For Example,./gradlew assemleExpediaRelease
            -PRELEASE_STORE_PASSWORD='Expedia_RELEASE_STORE_PASSWORD'
            -PRELEASE_KEY_PASSWORD='Expedia_RELEASE_KEY_PASSWORD'
            -PRELEASE_STORE_FILE='Expedia_RELEASE_STORE_FILE'
            -PRELEASE_KEY_ALIAS='Expedia_RELEASE_KEY_ALIAS'
            'Expedia_RELEASE_STORE_PASSWORD' etc will point to value in gradle.properties.
            */
            storeFile file(GradleUtil.getPropertyWithDefault(project, RELEASE_STORE_FILE, "."))
            storePassword GradleUtil.getPropertyWithDefault(project, RELEASE_STORE_PASSWORD, "")
            keyAlias GradleUtil.getPropertyWithDefault(project, RELEASE_KEY_ALIAS, "")
            keyPassword GradleUtil.getPropertyWithDefault(project, RELEASE_KEY_PASSWORD, "")
        }
    }

    defaultConfig {
        versionCode 1
        versionName "undefined"

        minSdkVersion 21
        targetSdkVersion 23

        multiDexEnabled = true
        testApplicationId "com.expedia.bookings.test"

        def testRunnerPackage = "com.expedia.bookings.test.espresso.InstrumentationTestRunner"

        //Set testRunnerPackage to com.expedia.bookings.test.CucumberInstrumentationRunner to run cucumber tests
        if (project.ext.has("cucumberInstrumentation")) {
            testRunnerPackage = "com.expedia.bookings.test.CucumberInstrumentationRunner"
        }

        testInstrumentationRunner testRunnerPackage
        manifestPlaceholders = [instrumentationRunnerPath : testRunnerPackage]

        buildConfigField "String", "GIT_REVISION",  "\"${gitRev}\""
        buildConfigField "String", "BUILD_NUMBER",  "\"${System.env.BUILD_NUMBER}\""
        buildConfigField "boolean", "IS_SCREENSHOT_BUILD", project.hasProperty("SCREENSHOT_BUILD") ? "Boolean.parseBoolean(\"true\")" : "Boolean.parseBoolean(\"false\")"
        buildConfigField "boolean", "ITIN_SCREENSHOT_BUILD", project.hasProperty("ITIN_SCREENSHOT_BUILD") ? "Boolean.parseBoolean(\"true\")" : "Boolean.parseBoolean(\"false\")"
    }

    productFlavors {
        expedia {
            buildConfigField "String", "brand", "\"Expedia\""
            buildConfigField "String", "MEDIA_URL", "\"https://media.expedia.com\""
            buildConfigField "String", "DEEPLINK_SCHEME", "\"expda\""
            buildConfigField "String", "USER_AGENT", "\"ExpediaBookings\""
            applicationId "com.expedia.bookings"

            def major = 17
            def minor = 21
            def patch = 0
            def build = 0
            versionCode GradleUtil.versionCode(major, minor, patch, build)
            versionName GradleUtil.versionName(major, minor, patch, build)
            // Explicitly define the languages we use so GPS and other libraries doesn't include unnecessary ones
            resConfigs "da", "de", "en_CA", "en_GB", "es", "es_ES", "fi", "fr", "fr_CA", "in", "it", "ja", "ko", "nb", "nl", "pt_BR", "sv", "th", "vi", "zh", "zh_HK", "zh_TW"
        }

        ebookers {
            buildConfigField "String", "brand", "\"ebookers\""
            buildConfigField "String", "MEDIA_URL", "\"https://media.expedia.com\""
            buildConfigField "String", "DEEPLINK_SCHEME", "\"bukr\""
            buildConfigField "String", "USER_AGENT", "\"Ebookers\""
            applicationId "com.ebookers"

            def major = 6
            def minor = 9
            def patch = 0
            def build = 0
            versionCode GradleUtil.versionCode(major, minor, patch, build)
            versionName GradleUtil.versionName(major, minor, patch, build)
            resConfigs "de", "en_GB", "fi", "fr"
        }

        voyages {
            buildConfigField "String", "brand", "\"Agence Voyages-SNCF.com\""
            buildConfigField "String", "MEDIA_URL", "\"https://media.expedia.com\""
            buildConfigField "String", "DEEPLINK_SCHEME", "\"vygs\""
            buildConfigField "String", "USER_AGENT", "\"VSC\""
            applicationId "com.expedia.bookings.vsc"

            def major = 4
            def minor = 6
            def patch = 0
            def build = 0
            versionCode GradleUtil.versionCode(major, minor, patch, build)
            versionName GradleUtil.versionName(major, minor, patch, build)
            resConfigs "fr"
        }

        travelocity {
            buildConfigField "String", "brand", "\"Travelocity\""
            buildConfigField "String", "MEDIA_URL", "\"https://images.trvl-media.com\""
            buildConfigField "String", "DEEPLINK_SCHEME", "\"tvly\""
            buildConfigField "String", "USER_AGENT", "\"TVLY\""
            applicationId "com.travelocity.android"

            def major = 9
            def minor = 9
            def patch = 0
            def build = 0
            versionCode GradleUtil.versionCode(major, minor, patch, build)
            versionName GradleUtil.versionName(major, minor, patch, build)
            resConfigs "en_CA", "fr_CA"
        }

        airAsiaGo {
            buildConfigField "String", "brand", "\"AirAsiaGo\""
            buildConfigField "String", "MEDIA_URL", "\"https://media.expedia.com\""
            buildConfigField "String", "DEEPLINK_SCHEME", "\"aago\""
            buildConfigField "String", "USER_AGENT", "\"AirAsiaGo\""
            applicationId "com.airasiago.android"

            def major = 4
            def minor = 8
            def patch = 0
            def build = 0
            versionCode GradleUtil.versionCode(major, minor, patch, build)
            versionName GradleUtil.versionName(major, minor, patch, build)
            resConfigs "th", "zh", "zh_HK", "in", "ja"
        }

        wotif {
            buildConfigField "String", "brand", "\"Wotif\""
            buildConfigField "String", "MEDIA_URL", "\"https://media.expedia.com\""
            buildConfigField "String", "DEEPLINK_SCHEME", "\"wotf\""
            buildConfigField "String", "USER_AGENT", "\"Wotif\""
            applicationId "com.wotif.android"

            def major = 4
            def minor = 8
            def patch = 1
            def build = 0
            versionCode GradleUtil.versionCode(major, minor, patch, build)
            versionName GradleUtil.versionName(major, minor, patch, build)
            resConfigs "en"
        }

        lastMinute {
            buildConfigField "String", "brand", "\"LM AU & NZ\""
            buildConfigField "String", "MEDIA_URL", "\"https://media.expedia.com\""
            buildConfigField "String", "DEEPLINK_SCHEME", "\"ltmn\""
            buildConfigField "String", "USER_AGENT", "\"LM\""
            applicationId "com.lastminute.android"

            def major = 4
            def minor = 8
            def patch = 0
            def build = 0
            versionCode GradleUtil.versionCode(major, minor, patch, build)
            versionName GradleUtil.versionName(major, minor, patch, build)
            resConfigs "en"
        }

        samsung {
            buildConfigField "String", "brand", "\"Expedia\""
            buildConfigField "String", "MEDIA_URL", "\"https://media.expedia.com\""
            buildConfigField "String", "DEEPLINK_SCHEME", "\"expda\""
            buildConfigField "String", "USER_AGENT", "\"ExpediaBookings\""
            applicationId "com.samsung.travel.android"

            def major = 2
            def minor = 0
            def patch = 0
            def build = 0
            versionCode GradleUtil.versionCode(major, minor, patch, build)
            versionName GradleUtil.versionName(major, minor, patch, build)
            resConfigs "ko", "fr", "fr_CA", "en_CA"
        }

        orbitz {
            buildConfigField "String", "brand", "\"Orbitz\""
            buildConfigField "String", "MEDIA_URL", "\"https://media.expedia.com\""
            buildConfigField "String", "DEEPLINK_SCHEME", "\"obtz\""
            buildConfigField "String", "USER_AGENT", "\"Orbitz\""
            applicationId "com.orbitz"

            def major = 8
            def minor = 9
            def patch = 0
            def build = 0
            versionCode GradleUtil.versionCode(major, minor, patch, build)
            versionName GradleUtil.versionName(major, minor, patch, build)
            resConfigs "en"
        }

        cheapTickets {
            buildConfigField "String", "brand", "\"CheapTickets\""
            buildConfigField "String", "MEDIA_URL", "\"https://media.expedia.com\""
            buildConfigField "String", "DEEPLINK_SCHEME", "\"hptk\""
            buildConfigField "String", "USER_AGENT", "\"CheapTickets\""
            applicationId "com.cheaptickets"

            def major = 6
            def minor = 9
            def patch = 0
            def build = 0
            versionCode GradleUtil.versionCode(major, minor, patch, build)
            versionName GradleUtil.versionName(major, minor, patch, build)
            resConfigs "en"
        }

        mrJet {
            buildConfigField "String", "brand", "\"MrJet\""
            buildConfigField "String", "MEDIA_URL", "\"https://media.expedia.com\""
            buildConfigField "String", "DEEPLINK_SCHEME", "\"mret\""
            buildConfigField "String", "USER_AGENT", "\"MrJet\""
            applicationId "se.mrjet"

            def major = 6
            def minor = 8
            def patch = 0
            def build = 0
            versionCode GradleUtil.versionCode(major, minor, patch, build)
            versionName GradleUtil.versionName(major, minor, patch, build)
            resConfigs "sv"
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled = GradleUtil.shouldEnableTestCoverage(project)

            applicationIdSuffix ("." + GradleUtil.getBuildIdentifier(project))

            minifyEnabled shouldRunProguard
            proguardFile file('proguard.cfg')
            testProguardFile file('proguard.cfg')

            ext.betaDistributionReleaseNotesFilePath = CHANGELOG_PATH
            ext.betaDistributionGroupAliasesFilePath = CRASHLYTICS_BETA_GROUPS_PATH

            buildConfigField "boolean", "RELEASE", "Boolean.parseBoolean(\"false\")"
            buildConfigField "boolean", "USABILITY", GradleUtil.isUsabilityBuild(project) ? "Boolean.parseBoolean(\"true\")" : "Boolean.parseBoolean(\"false\")"
        }

        release {
            if (GradleUtil.isUsabilityBuild(project)) {
                applicationIdSuffix ("." + GradleUtil.getBuildIdentifier(project))
            }

            minifyEnabled true
            proguardFile file('proguard.cfg')
            zipAlignEnabled true
            signingConfig signingConfigs.release

            buildConfigField "boolean", "RELEASE", "true"
            buildConfigField "boolean", "USABILITY", GradleUtil.isUsabilityBuild(project) ? "true" : "false"
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'

        debug {
            assets.srcDirs += '../lib/mocked/templates'
        }

        test {
            java.srcDir '../lib/ExpediaBookings/src/test/java/com/expedia/bookings/data'
            java.srcDir '../lib/ExpediaBookings/src/test/java/com/expedia/bookings/testrule'
        }

        androidTest {
            assets.srcDirs = ['src/androidTest/assets']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    checkstyle {
        toolVersion = '6.14.1'
    }

    task checkstyle(type: Checkstyle) {
        configFile file('checkstyle.xml')
        source 'src/'
        include '**/*.java'

        // These files are from outside our project
        exclude (
            '**/CustomEditText.java',
            '**/SocketActivityHierarchyServer.java',
        )

        classpath = files()
        ignoreFailures = false
    }

    fork {
        totalAllowedRetryQuota = 99
        retryPerTestCaseQuota = 2
        testOutputTimeout = 90000
        // Workaround to run tests in parallel on all connected devices. It should run on all devices above api level 19.
        poolingStrategy {
            computed {
                characteristic = "api"
                groups {
                    connected_devices = 19
                }
            }
        }
    }
}

public class GradleUtil {
    static def isDefined(s) {
        return s != null && !s.isEmpty() && s != "null"
    }

    static def shouldEnableProguard(Project project) {
        return shouldEnableOnJenkinsOrIfManuallyEnabled(project, "runProguard")
    }

    static def shouldEnableTestCoverage(Project project) {
        return shouldEnableOnJenkinsOrIfManuallyEnabled(project, "enableTestCoverage")
    }

    private static def shouldEnableOnJenkinsOrIfManuallyEnabled(Project project, String manualEnableKey) {
        def buildNumber = "${System.env.BUILD_NUMBER}"
        def ci = "${System.env.CI}"
        def boolean shouldEnable = false

        // If BUILD_NUMBER defined turn on proguard
        if (isDefined(buildNumber)) {
            shouldEnable = true
        }

        // If CI defined turn on proguard
        if (isDefined(ci)) {
            shouldEnable = true
        }

        // This setting supercedes BUILD_NUMBER
        if (project.hasProperty(manualEnableKey)) {
            shouldEnable = project.getProperty(manualEnableKey).toBoolean()
        }

        return shouldEnable;
    }

    static def getPropertyWithDefault(Project project, String key, String thedefault) {
        if (project.hasProperty(key)) {
            return project.getProperty(key).toString()
        }

        return thedefault
    }

    static def getBuildIdentifier(Project project) {
        return getPropertyWithDefault(project, "id", "debug")
    }

    static def getAppName(Project project, variant) {
        // Don't touch release builds
        if (variant.buildType.name == "release" || isUsabilityBuild(project)) {
            return null
        }

        def flavor = variant.productFlavors.get(0).name
        flavor = flavor.capitalize()

        def type = variant.buildType.name
        if (type == "debug") {
            type = getBuildIdentifier(project)
        }
        type = type.capitalize()

        def appname = flavor + " " + type
        return appname.tr('_', '.')
    }

    static def isUsabilityBuild(Project project) {
        return getBuildIdentifier(project) == "usability"
    }

    static def getGitRevision() {
        def hash = "git rev-parse --short HEAD".execute().text.trim()
        def hasLocalChanges = "git diff --raw".execute().text
        if (hasLocalChanges) {
            hash = "!" + hash
        }
        return hash
    }

    static def versionCode(major, minor, patch, build) {
        return major * 1000000 + minor * 10000 + patch * 100 + build
    }

    static def versionName(major, minor, patch, build) {
        def name = "${major}.${minor}.${patch}"
        if (build > 0) {
            name = "${name}.${build}"
        }
        return name
    }
}

def releaseAccountTokens = [
    'com.expedia.bookings' : 'expedia.tuid',
    'com.expedia.bookings.vsc' : 'vsc.tuid',
    'com.travelocity.android' : 'travelocity.tuid',
]

android.applicationVariants.all { variant ->
    // We released apps with the following tokens so we should maintain them so people don't get logged out
    def token = releaseAccountTokens[variant.applicationId]
    if (!GradleUtil.isDefined(token)) {
        token = "${variant.applicationId}.tuid"
    }
    variant.resValue "string", "expedia_account_token_type_tuid_identifier", "${token}"
    variant.resValue "string", "expedia_account_type_identifier", "${variant.applicationId}"

    variant.resValue "string", "authority_autocomplete_hotel", "${variant.applicationId}.autocomplete.hotel"
    variant.resValue "string", "authority_autocomplete_airport", "${variant.applicationId}.autocomplete.airport"
    variant.resValue "string", "authority_autocomplete_suggestions", "${variant.applicationId}.suggestions"
    variant.resValue "string", "authority_account_sync", "${variant.applicationId}.account.sync"

    def launcherName = GradleUtil.getAppName(project, variant)
    if (!GradleUtil.isDefined(launcherName)) {
        // Must be a release build, so we default to app_name
        launcherName = "@string/app_name"
    }
    variant.resValue "string", "launcher_name", "${launcherName}"

    variant.mergeAssets.doLast {
        delete(fileTree(dir: variant.mergeAssets.outputDir, includes: sharedDataFilesToRemove(variant)))

    }
}

def sharedDataFilesToRemove(variant) {
    List<String> filesToRemove = new ArrayList<String>()
    android.productFlavors.all { flavor ->
        if (flavor.name != variant.productFlavors.get(0).name) {
            if (flavor.name == 'travelocity') {
                filesToRemove.add('ExpediaSharedData/TravelocityPointOfSaleConfig.json')
                filesToRemove.add('ExpediaSharedData/TVLYServerURLs.json')
            }
            else if (flavor.name == 'voyages') {
                filesToRemove.add('ExpediaSharedData/VSCPointOfSaleConfig.json')
                filesToRemove.add('ExpediaSharedData/VSCServerURLs.json')
            }
            else {
                filesToRemove.add('ExpediaSharedData/' + flavor.name.capitalize().concat('PointOfSaleConfig.json'))
                filesToRemove.add('ExpediaSharedData/' + flavor.name.capitalize().concat('ServerURLs.json'))
            }
        }
    }
    filesToRemove.add('ExpediaSharedData/validate.sh')
    return filesToRemove
}
