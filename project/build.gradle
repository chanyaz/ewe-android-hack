def shouldRunProguard
def jenkinsBuildNumber = "$System.env.BUILD_NUMBER"
if (project.hasProperty("runProguard") || GradleUtil.isDefined(jenkinsBuildNumber)) {
    shouldRunProguard = true
} else {
    shouldRunProguard = false
}

apply plugin: 'android'

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile project(':lib:ActionBarSherlock:actionbarsherlock')
    compile project(':lib:FacebookSdk:facebook')
    compile project(':lib:FlightLib')
    compile project(':lib:google-play-services')
    compile project(':lib:svg-android:svgandroid')
    compile project(':lib:Utils')
}

android {
    compileSdkVersion 18
    buildToolsVersion "18.0.1"

    defaultConfig {
        versionCode 31
        versionName "3.5"
        minSdkVersion 8
        targetSdkVersion 18
    }

    productFlavors {
        Expedia {
            packageName "com.expedia.bookings"
            buildConfig "public static final boolean IS_VSC = false;"
        }

        VSC {
            buildConfig "public static final boolean IS_VSC = true;"
            packageName "com.expedia.bookings.vsc"
            versionCode 1
            versionName "1.0"
        }
    }

    // Add the HockeyMeta extension to all build types
    buildTypes.all { buildType ->
        buildType.extensions.create("hockey", HockeyExtension)
    }

    buildTypes {
        debug {
            packageNameSuffix ".debug"

            runProguard shouldRunProguard
            proguardFile 'proguard.cfg'
        }

        latest.initWith(buildTypes.debug)
        latest {
            packageNameSuffix ".latest"
            hockey.enabled true
        }

        next.initWith(buildTypes.debug)
        next {
            packageNameSuffix ".next"
            hockey.enabled true
        }

        tablet.initWith(buildTypes.debug)
        tablet {
            packageNameSuffix ".tablet"
            hockey.enabled true
        }

        release {
            runProguard true
            proguardFile 'proguard.cfg'
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        instrumentTest.setRoot('tests')

        VSC {
            manifest.srcFile 'AndroidManifest-vsc.xml'
            res.srcDirs 'res_vsc'
        }

        signingConfigs {
            debug {
                storeFile file("../common/debug.keystore")
            }
        }
    }

}

/////////////////// CUSTOM OVERRIDE LOGIC ///////////////////

// Path to file in src tree with ContentProvider authority declarations
final def contentProviderBuildStringsPath = "project/res/values/gradle_content_provider_authorities.xml"

// This block iterates over each build variant and injects tasks to (1) overwrite AndroidManifest
// values and inject manifest tags for HockeyApp builds (2) write Android resource values overrides.
android.applicationVariants.all { variant ->
    // Android values resources to be written for override
    def resourceOverridePairs = []
    def contentProviderOverridePairs = []

    def uniqueName = variant.productFlavors.get(0).name + variant.buildType.name.capitalize()

    // Create a build variant-unique task for overriding Android resource value pairs.
    def resourceTask = "customResourceOverride$uniqueName"
    task(resourceTask) << {
        generateUniqueContentProviderStrings(variant, contentProviderBuildStringsPath, contentProviderOverridePairs)
        generateHomescreenLauncherAppNameLabel(variant, resourceOverridePairs)
        generateAccountManagerTypeToken(variant, resourceOverridePairs)

        if (variant.buildType.hockey.enabled) {
            generateHockeyAppId(variant, resourceOverridePairs)
            enableHockeyApp(resourceOverridePairs)
        }

        writeOverridesToStringResourceFile(resourceOverridePairs, contentProviderOverridePairs, getCustomOverrideResDir(variant))
    }

    // Insert our task between mergeResources and processResources. This ensures that the file exists
    // and also that we modify before the values are consumed.
    variant.processResources.dependsOn resourceTask
    tasks[resourceTask].dependsOn variant.mergeResources

    // Create a task for overwriting and injecting content in the generated AndroidManifest
    def manifestTask = "overwriteGeneratedManifest$uniqueName"
    task(manifestTask) << {
        def manifestFile = variant.processManifest.manifestOutputFile
        def manifest = new XmlParser().parse(manifestFile)
        def applicationNode = manifest.application.get(0)

        def namespace = new groovy.xml.Namespace("http://schemas.android.com/apk/res/android", 'android')
        def packageName = GradleUtil.getPackageName(variant)

        modifyPushNotificationPermission(manifest, namespace, packageName)
        modifyContentProviderAuthorities(applicationNode, namespace, contentProviderOverridePairs)
        modifyAppWidgetIntentActions(applicationNode, namespace, packageName)

        if (variant.buildType.hockey.enabled) {
            injectBuildNumberMetaData(applicationNode, namespace, jenkinsBuildNumber)
        }

        // Write the Manifest modifications back to file
        def xmlWriter = new XmlNodePrinter(new PrintWriter(new FileWriter(manifestFile)))
        xmlWriter.setPreserveWhitespace(true)
        xmlWriter.print(manifest)
    }

    // Insert our task between processManifest and processResources. This ensures that the Manifest
    // has been generated and that we modify it before it's values get consumed.
    variant.processResources.dependsOn manifestTask
    tasks[manifestTask].dependsOn variant.processManifest

}

/////////////////// HOMESCREEN LAUNCHER LABEL ///////////////////

def generateHomescreenLauncherAppNameLabel(buildVariant, resourceOverridePairs) {
    def appNameLabel = AppNameLabels.getAppName(buildVariant)

    if (GradleUtil.isDefined(appNameLabel)) {
        resourceOverridePairs.add(new AndroidResource("string", "app_name", appNameLabel))
    }
}

/////////////////// ACCOUNTMANAGER ///////////////////

def generateAccountManagerTypeToken(buildVariant, resourceOverridePairs) {
    def accountToken = AccountManagerTypeTokens.getToken(buildVariant)
    resourceOverridePairs.add(new AndroidResource("string", "expedia_account_token_type_tuid_identifier", accountToken))
    resourceOverridePairs.add(new AndroidResource("string", "expedia_account_type_identifier", GradleUtil.getPackageName(buildVariant)))
}

/////////////////// CONTENTPROVIDERS AND THE LIKE ///////////////////

def generateUniqueContentProviderStrings(buildVariant, contentProviderBuildStringsPath, contentProviderOverridePairs) {
    def stringSuffix = "." + buildVariant.productFlavors.get(0).name + "." + buildVariant.buildType.name
    def xmlStringsFileAsNode = new XmlParser().parse(new File(rootDir, contentProviderBuildStringsPath))
    xmlStringsFileAsNode.each {
        contentProviderOverridePairs.add(new AndroidResource("string", it.attributes()["name"], it.text() + stringSuffix))
    }
}

def modifyContentProviderAuthorities(applicationNode, namespace, contentProviderOverridePairs) {
    applicationNode.provider.each { provider ->
        contentProviderOverridePairs.each { androidResource ->
            def manifestKey = "@string/" + androidResource.getName()
            if (provider.attributes()[namespace.authorities] == manifestKey) {
                provider.attributes()[namespace.authorities] = androidResource.getValue()
            }
        }
    }
}

/////////////////// HOCKEYAPP ///////////////////

// Specifies the HockeyApp buildNumber meta-data tag from the AndroidManifest as the Jenkins build number
// system environment variable. Required for HockeyApp versioning. See documentation:
// http://hockeyapp.net/blog/2013/07/03/hockeysdk-android-3-0-release-notes.html

def injectBuildNumberMetaData(applicationNode, namespace, jenkinsBuildNumber) {
    def hockeyUpdateActivityTag = new Node(applicationNode, 'activity')
    hockeyUpdateActivityTag.attributes()[namespace.name] = 'net.hockeyapp.android.UpdateActivity'
    hockeyUpdateActivityTag.attributes()[namespace.screenOrientation] = 'portrait'

    def hockeyBuildNumberMetaDataTag = new Node(applicationNode, 'meta-data')
    hockeyBuildNumberMetaDataTag.attributes()[namespace.name] = 'buildNumber'
    hockeyBuildNumberMetaDataTag.attributes()[namespace.value] = jenkinsBuildNumber
}

// Note: I am thinking of migrating this to BuildConfig, but this change would require some legitimate
// changes to the HockeyApp utilities from AndroidUtils.git, so we just override the Android resource
// value for now.
def enableHockeyApp(resourceOverridePairs) {
    resourceOverridePairs.add(new AndroidResource("bool", "hockeyapp_enabled", true))
}

def generateHockeyAppId(buildVariant, resourceOverridePairs) {
    def hockeyId = HockeyExtension.getHockeyId(buildVariant)
    resourceOverridePairs.add(new AndroidResource("string", "hockey_app_id", hockeyId))
}

/////////////////// APPWIDGET ///////////////////

def modifyAppWidgetIntentActions(applicationNode, namespace, packageName) {
    // AppWidget intent-filter actions
    applicationNode.service.each { service ->
        if (service.attributes()[namespace.name] == "com.expedia.bookings.appwidget.ExpediaBookingsService") {
            service."intent-filter".action.each { action ->
                def orig = action.attributes()[namespace.name]
                action.attributes()[namespace.name] = orig.replaceAll("com.expedia.bookings", packageName)
            }
        }
    }
}

/////////////////// PUSH NOTIFICATIONS ///////////////////

def modifyPushNotificationPermission(manifestNode, namespace, packageName) {
    // Push notification permission string
    manifestNode.permission.each { permission ->
        if (permission.attributes()[namespace.name] == "com.expedia.bookings.permission.C2D_MESSAGE") {
            def orig = permission.attributes()[namespace.name]
            permission.attributes()[namespace.name] = orig.replaceAll("com.expedia.bookings", packageName)
        }
    }
    manifestNode."uses-permission".each { usesPermission ->
        if (usesPermission.attributes()[namespace.name] == "com.expedia.bookings.permission.C2D_MESSAGE") {
            def orig = usesPermission.attributes()[namespace.name]
            usesPermission.attributes()[namespace.name] = orig.replaceAll("com.expedia.bookings", packageName)
        }
    }
}

/////////////////// RESOURCE OVERRIDE FILE WRITE ///////////////////

def writeOverridesToStringResourceFile(resourceOverridePairs, contentProviderOverridePairs, overrideResValuesDir) {
    createDir(overrideResValuesDir)

    def writer = new StringWriter()
    writer.write("""<?xml version="1.0" encoding="utf-8"?>\n""")

    def xml = new groovy.xml.MarkupBuilder(writer)
    xml.setDoubleQuotes(true)
    xml.resources() {
        resourceOverridePairs.each { androidResource ->
            "${androidResource.getType()}"(name: androidResource.getName(), androidResource.getValue())
        }

        contentProviderOverridePairs.each { androidResource ->
            "${androidResource.getType()}"(name: androidResource.getName(), androidResource.getValue())
        }
    }

    def file = new File(overrideResValuesDir + "string_values_overrides.xml")
    file.write(writer.toString())
}

/////////////////// UTILITIES ///////////////////

def getCustomOverrideResDir(buildVariant) {
    return buildVariant.mergeResources.outputDir.getAbsolutePath() + "/values-v1/"
}

def createDir(dir) {
    def file = new File(dir)
    file.mkdirs()
}
