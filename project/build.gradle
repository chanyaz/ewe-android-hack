def shouldRunProguard = GradleUtil.shouldEnableProguard(project)
def gitRev = GradleUtil.getGitRevision()

def CHANGELOG_PATH = "changelog.txt"
def CRASHLYTICS_BETA_GROUPS_PATH = "buildbot/crashlytics_beta_groups.txt"

apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'kotlin-android'
apply plugin: 'io.fabric'
apply plugin: 'checkstyle'

repositories {
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }
    maven { url 'http://www.leanplum.com/leanplum-sdks/' }
}

dependencies {
    compile fileTree(dir: 'libs', include: [
            'activeandroid-20131111.jar',
            'admsAppLibrary-3.0.5.jar',
            'adxtag3.2.6.jar',
            'Kahuna.jar',
    ])
    compile project(':lib:FlightLib')
    compile project(':lib:svg-android:svgandroid')
    compile project(':lib:Utils')
    compile project(':lib:ShareEverywhere:shareeverywhere')
    compile project(':lib:AndroidTime')
    // We keep some classes in a pure java project so we can test them with pure jvm unit tests
    compile (project(':lib:ExpediaBookings')) {
        exclude group: 'org.json'
    }

    compile "org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}"

    // Google Play Services deps on the support lib
    // however we add it here so the android-sdk-manager plugin behaves
    compile "com.android.support:support-v4:${rootProject.ext.supportLibVersion}"
    compile "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    compile "com.android.support:palette-v7:${rootProject.ext.supportLibVersion}"
    compile "com.android.support:recyclerview-v7:21.0.3"
    compile "com.android.support:cardview-v7:${rootProject.ext.supportLibVersion}"
    compile 'com.android.support:support-annotations:${rootProject.ext.supportLibVersion}'

    compile "com.google.android.gms:play-services-maps:${rootProject.ext.googlePlayServicesVersion}"
    compile "com.google.android.gms:play-services-wallet:${rootProject.ext.googlePlayServicesVersion}"
    compile "com.google.android.gms:play-services-location:${rootProject.ext.googlePlayServicesVersion}"

    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.squareup.okhttp:okhttp:2.3.0'
    compile 'com.squareup.okio:okio:1.3.0'
    compile 'com.squareup:otto:1.3.5'
    compile 'com.squareup.phrase:phrase:1.1.0'
    compile 'com.google.code.gson:gson:2.3'
    compile 'com.jakewharton:butterknife:6.0.0'
    compile 'com.leanplum:Leanplum:1.2.12'
    compile 'com.facebook.android:facebook-android-sdk:3.21.1'
    compile 'io.reactivex:rxandroid:0.24.0'
    compile ('com.wefika:flowlayout:0.4.0') {
        exclude group: 'com.intellij'
    }

    // Dagger 2.0
    compile 'com.google.dagger:dagger:2.0'
    apt 'com.google.dagger:dagger-compiler:2.0'
    provided 'org.glassfish:javax.annotation:10.0-b28'

    compile ('com.crashlytics.sdk.android:crashlytics:2.2.3@aar') {
        transitive = true
    }

    // Debug dependencies
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3.1'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3'

    debugCompile 'com.squareup.okhttp:mockwebserver:2.3.0'
    debugCompile (project(':lib:mocked:mocke3')) {
        transitive = false
    }

    def stethoVersion = '1.1.0'
    debugCompile "com.facebook.stetho:stetho:${stethoVersion}"
    debugCompile "com.facebook.stetho:stetho-okhttp:${stethoVersion}"

    // Test dependencies
    testCompile 'junit:junit:4.12'
    def roboVersion = '3.0-rc3'
    testCompile "org.robolectric:robolectric:${roboVersion}"
    testCompile "org.robolectric:shadows-multidex:${roboVersion}"
    testCompile "org.mockito:mockito-core:1.10.19"

    def espressoVersion = '2.1'
    androidTestCompile ("com.android.support.test.espresso:espresso-core:${espressoVersion}"){
        exclude group: 'com.android.support'
        exclude group: 'javax.inject'
    }
    androidTestCompile ("com.android.support.test.espresso:espresso-contrib:${espressoVersion}"){
        exclude group: 'com.android.support'
        exclude group: 'javax.inject'
    }

    androidTestCompile 'com.android.support.test:rules:0.2'
    androidTestCompile "com.android.support.test.espresso:espresso-intents:${espressoVersion}"
    androidTestCompile "com.android.support:support-annotations:${rootProject.ext.supportLibVersion}"

    androidTestCompile fileTree(dir: 'libs', include: [
            'spoon-client-1.1.3-EXP.jar',
    ])
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    dexOptions {
        javaMaxHeapSize "2g"
    }

    lintOptions {
        checkReleaseBuilds false
        showAll true
        lintConfig file("lint.xml")
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    signingConfigs {
        debug {
            storeFile file("../common/debug.keystore")
        }

        release {
            storeFile file(GradleUtil.getPropertyWithDefault(project, "RELEASE_STORE_FILE", "."))
            storePassword GradleUtil.getPropertyWithDefault(project, "RELEASE_STORE_PASSWORD", "")
            keyAlias GradleUtil.getPropertyWithDefault(project, "RELEASE_KEY_ALIAS", "")
            keyPassword GradleUtil.getPropertyWithDefault(project, "RELEASE_KEY_PASSWORD", "")
        }
    }

    defaultConfig {
        versionCode 1
        versionName "undefined"

        minSdkVersion 16
        targetSdkVersion 22

        multiDexEnabled = true
        testApplicationId "com.expedia.bookings.test"
        testInstrumentationRunner "com.expedia.bookings.test.ui.utils.SpoonInstrumentationTestRunner"

        buildConfigField "String", "MEDIA_URL", "\"http://media.expedia.com\""
        buildConfigField "String", "GIT_REVISION",  "\"${gitRev}\""
        buildConfigField "String", "BUILD_NUMBER",  "\"${System.env.BUILD_NUMBER}\""

        // Explicitly define the languages we use so GPS and other libraries doesn't include unnecessary ones
        resConfigs "da", "de", "en_CA", "en_GB", "es", "es_ES", "fr", "fr_CA", "in", "it", "ja", "ko", "nb", "nl", "pt_BR", "sv", "th", "vi", "zh", "zh_HK", "zh_TW"
    }

    productFlavors {
        expedia {
            buildConfigField "String", "MEDIA_URL", "\"http://media.expedia.com\""
            applicationId "com.expedia.bookings"

            def major = 6
            def minor = 1
            def patch = 0
            def build = 0
            versionCode GradleUtil.versionCode(major, minor, patch, build)
            versionName GradleUtil.versionName(major, minor, patch, build)
        }

        voyages {
            buildConfigField "String", "MEDIA_URL", "\"http://media.expedia.com\""
            applicationId "com.expedia.bookings.vsc"

            def major = 2
            def minor = 0
            def patch = 0
            def build = 0
            versionCode GradleUtil.versionCode(major, minor, patch, build)
            versionName GradleUtil.versionName(major, minor, patch, build)
        }

        travelocity {
            buildConfigField "String", "MEDIA_URL", "\"http://images.trvl-media.com\""
            applicationId "com.travelocity.android"

            def major = 7
            def minor = 1
            def patch = 0
            def build = 0
            versionCode GradleUtil.versionCode(major, minor, patch, build)
            versionName GradleUtil.versionName(major, minor, patch, build)
        }

        airAsiaGo {
            buildConfigField "String", "MEDIA_URL", "\"http://media.expedia.com\""
            applicationId "com.airasiago.android"
            def major = 2
            def minor = 0
            def patch = 0
            def build = 0
            versionCode GradleUtil.versionCode(major, minor, patch, build)
            versionName GradleUtil.versionName(major, minor, patch, build)
        }

        wotif {
            buildConfigField "String", "MEDIA_URL", "\"http://media.expedia.com\""
            applicationId "com.wotif.android"
            def major = 2
            def minor = 1
            def patch = 0
            def build = 0
            versionCode GradleUtil.versionCode(major, minor, patch, build)
            versionName GradleUtil.versionName(major, minor, patch, build)
        }

        lastMinute {
            buildConfigField "String", "MEDIA_URL", "\"http://media.expedia.com\""
            applicationId "com.lastminute.android"
            def major = 1
            def minor = 0
            def patch = 0
            def build = 0
            versionCode GradleUtil.versionCode(major, minor, patch, build)
            versionName GradleUtil.versionName(major, minor, patch, build)
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ("." + GradleUtil.getBuildIdentifier(project))

            minifyEnabled shouldRunProguard
            proguardFile file('proguard.cfg')
            testProguardFile file('proguard.cfg')

            ext.betaDistributionReleaseNotesFilePath = CHANGELOG_PATH
            ext.betaDistributionGroupAliasesFilePath = CRASHLYTICS_BETA_GROUPS_PATH

            buildConfigField "boolean", "RELEASE", "false"
            buildConfigField "boolean", "USABILITY", GradleUtil.isUsabilityBuild(project) ? "true" : "false"
        }

        release {
            if (GradleUtil.isUsabilityBuild(project)) {
                applicationIdSuffix ("." + GradleUtil.getBuildIdentifier(project))
            }

            minifyEnabled true
            proguardFile file('proguard.cfg')
            zipAlignEnabled true
            signingConfig signingConfigs.release

            buildConfigField "boolean", "RELEASE", "true"
            buildConfigField "boolean", "USABILITY", GradleUtil.isUsabilityBuild(project) ? "true" : "false"
        }
    }

    sourceSets {
        debug {
            assets.srcDirs = ['../lib/mocked/templates']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    checkstyle {
        toolVersion = '6.2'
    }

    task checkstyle(type: Checkstyle) {
        configFile file('checkstyle.xml')
        source 'src/'
        include '**/*.java'

        // These files are from outside our project
        exclude (
            '**/gl/*.java',
            '**/GLTagProgressBar.java',
            '**/CustomEditText.java',
            '**/SocketActivityHierarchyServer.java',
        )

        classpath = files()
        ignoreFailures = false
    }
}

public class GradleUtil {
    static def isDefined(s) {
        return s != null && !s.isEmpty() && s != "null"
    }

    static def shouldEnableProguard(Project project) {
        def buildNumber = "${System.env.BUILD_NUMBER}"
        def ci = "${System.env.CI}"
        def boolean shouldRunProguard = false

        // If BUILD_NUMBER defined turn on proguard
        if (isDefined(buildNumber)) {
            shouldRunProguard = true
        }

        // If CI defined turn on proguard
        if (isDefined(ci)) {
            shouldRunProguard = true
        }

        // This setting supercedes BUILD_NUMBER
        if (project.hasProperty("runProguard")) {
            shouldRunProguard = project.getProperty("runProguard").toBoolean()
        }

        return shouldRunProguard;
    }

    static def getPropertyWithDefault(Project project, String key, String thedefault) {
        if (project.hasProperty(key)) {
            return project.getProperty(key).toString()
        }

        return thedefault
    }

    static def getBuildIdentifier(Project project) {
        return getPropertyWithDefault(project, "id", "debug")
    }

    static def getAppName(Project project, variant) {
        // Don't touch release builds
        if (variant.buildType.name == "release" || isUsabilityBuild(project)) {
            return null
        }

        def flavor = variant.productFlavors.get(0).name
        flavor = flavor.capitalize()

        def type = variant.buildType.name
        if (type == "debug") {
            type = getBuildIdentifier(project)
        }
        type = type.capitalize()

        def appname = flavor + " " + type
        return appname.tr('_', '.')
    }

    static def isUsabilityBuild(Project project) {
        return getBuildIdentifier(project) == "usability"
    }

    static def getGitRevision() {
        def hash = "git rev-parse --short HEAD".execute().text.trim()
        def hasLocalChanges = "git diff --raw".execute().text
        if (hasLocalChanges) {
            hash = "!" + hash
        }
        return hash
    }

    static def versionCode(major, minor, patch, build) {
        return major * 1000000 + minor * 10000 + patch * 100 + build
    }

    static def versionName(major, minor, patch, build) {
        def name = "${major}.${minor}.${patch}"
        if (build > 0) {
            name = "${name} - ${build}"
        }
        return name
    }
}

def releaseAccountTokens = [
    'com.expedia.bookings' : 'expedia.tuid',
    'com.expedia.bookings.vsc' : 'vsc.tuid',
    'com.travelocity.android' : 'travelocity.tuid',
]

android.applicationVariants.all { variant ->
    // We released apps with the following tokens so we should maintain them so people don't get logged out
    def token = releaseAccountTokens[variant.applicationId]
    if (!GradleUtil.isDefined(token)) {
        token = "${variant.applicationId}.tuid"
    }
    variant.resValue "string", "expedia_account_token_type_tuid_identifier", "${token}"
    variant.resValue "string", "expedia_account_type_identifier", "${variant.applicationId}"

    variant.resValue "string", "authority_autocomplete_hotel", "${variant.applicationId}.autocomplete.hotel"
    variant.resValue "string", "authority_autocomplete_airport", "${variant.applicationId}.autocomplete.airport"
    variant.resValue "string", "authority_autocomplete_suggestions", "${variant.applicationId}.suggestions"
    variant.resValue "string", "authority_account_sync", "${variant.applicationId}.account.sync"

    def launcherName = GradleUtil.getAppName(project, variant)
    if (!GradleUtil.isDefined(launcherName)) {
        // Must be a release build, so we default to app_name
        launcherName = "@string/app_name"
    }
    variant.resValue "string", "launcher_name", "${launcherName}"
}

// robolectric - fix for robolectric issue
apply from: "build.workaround-missing-resource.gradle"

