def shouldRunProguard = GradleUtil.shouldEnableProguard(project)
def gitRev = GradleUtil.getGitRevision()

def CHANGELOG_PATH = "changelog.txt"
def CRASHLYTICS_BETA_GROUPS_PATH = "jenkins/crashlytics_beta_groups.txt"

apply plugin: 'com.android.feature'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'
apply plugin: 'checkstyle'
apply from: '../jacoco.gradle'
apply plugin: 'org.jetbrains.kotlin.android.extensions'
apply plugin: 'com.jakewharton.butterknife'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    maven { url "https://github.com/carnivalmobile/maven-repository/raw/master/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    google()
}

dependencies {
    implementation fileTree(dir: "$project.rootDir/project/libs", include: [
            'activeandroid-20131111.jar',
            'adobeMobileLibrary-4.13.5.jar',
            'climobile.aar',
            'svg-android-1.0.0.aar'
    ])

    application project(':install')

    implementation project(':lib:AndroidTime')
    implementation project(':lib:AndroidUtils')
    // We keep some classes in a pure java project so we can test them with pure jvm unit tests
    implementation (project(':lib:ExpediaBookings')) {
        exclude group: 'org.json'
    }
    implementation project(':lib:AccountLib')
    implementation 'com.dgmltn:share-everywhere:1.0.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}"
    testImplementation "org.jetbrains.kotlin:kotlin-test:${kotlin_version}"
    implementation 'com.google.maps.android:android-maps-utils:0.4.3'

    // Google Play Services deps on the support lib
    // however we add it here so the android-sdk-manager plugin behaves

    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation "com.android.support:support-v4:${rootProject.ext.supportLibVersion}"
    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    implementation "com.android.support:palette-v7:${rootProject.ext.supportLibVersion}"
    implementation "com.android.support:gridlayout-v7:${rootProject.ext.supportLibVersion}"
    implementation "com.android.support:recyclerview-v7:${rootProject.ext.supportLibVersion}"
    implementation "com.android.support:cardview-v7:${rootProject.ext.supportLibVersion}"
    implementation "com.android.support:support-annotations:${rootProject.ext.supportLibVersion}"
    implementation "com.android.support:design:${rootProject.ext.supportLibVersion}"
    implementation "com.android.support:customtabs:${rootProject.ext.supportLibVersion}"
    debugImplementation "com.android.support:preference-v7:${rootProject.ext.supportLibVersion}"
    debugImplementation "com.android.support:preference-v14:${rootProject.ext.supportLibVersion}"

    implementation "android.arch.lifecycle:extensions:${lifecyle_version}"
    implementation "android.arch.lifecycle:common-java8:${lifecyle_version}"

    implementation "com.google.android.gms:play-services-maps:15.0.1"
    implementation "com.google.android.gms:play-services-location:15.0.1"
    implementation "com.google.android.gms:play-services-gcm:15.0.1"

    implementation "android.arch.persistence.room:runtime:${room_persistence_version}"
    testImplementation "android.arch.persistence.room:testing:${room_persistence_version}"
    implementation "android.arch.persistence.room:rxjava2:${room_persistence_version}"
    kapt "android.arch.persistence.room:compiler:${room_persistence_version}"

    implementation 'com.squareup.picasso:picasso:2.5.2'
    implementation "com.squareup.okhttp3:okhttp:${okhttp_version}"
    implementation "com.squareup.okhttp3:okhttp-urlconnection:${okhttp_version}"
    implementation 'com.jakewharton.picasso:picasso2-okhttp3-downloader:1.1.0'
    implementation 'com.squareup.okio:okio:1.13.0'
    implementation 'com.squareup:otto:1.3.8'
    implementation 'com.squareup.phrase:phrase:1.1.0'
    implementation 'com.google.code.gson:gson:2.8.0'
    implementation 'com.jakewharton:butterknife:9.0.0-SNAPSHOT'
    kapt 'com.jakewharton:butterknife-compiler:9.0.0-SNAPSHOT'

    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation "io.reactivex.rxjava2:rxjava:${rxjava_version}"
    implementation 'com.jakewharton.rxbinding2:rxbinding:2.0.0'
    implementation 'com.facebook.android:facebook-android-sdk:4.16.1'
    implementation("com.carnival.sdk:carnival:5.5.0") {
        exclude group: 'com.android.support'
        exclude group: 'com.google.android.gms'
        exclude group: 'com.squareup.okhttp3'
        exclude group: 'com.squareup.okio'
        exclude group: 'com.intellij'
    }
    implementation "com.google.firebase:firebase-core:15.0.2"
    implementation "com.google.firebase:firebase-invites:15.0.1"
    implementation "com.google.android.gms:play-services-ads:15.0.1"
    implementation "com.android.support:support-core-utils:${rootProject.ext.supportLibVersion}"

    implementation ('com.tune:tune-marketing-console-sdk:4.10.1') {
        exclude group: 'com.android.support', module: 'support-v4'
    }
    implementation ('com.wefika:flowlayout:0.4.0') {
        exclude group: 'com.intellij'
    }

    // Library for playing animations created with After Effects and the Bodymovin plugin
    implementation ('com.airbnb.android:lottie:2.5.1') {
        exclude group: 'com.android.support'
    }

    // Dagger 2.6.1
    implementation "com.google.dagger:dagger:${dagger_version}"
    kapt "com.google.dagger:dagger-compiler:${dagger_version}"
    kaptTest "com.google.dagger:dagger-compiler:${dagger_version}"

    compileOnly 'org.glassfish:javax.annotation:10.0-b28'

    implementation ('com.crashlytics.sdk.android:crashlytics:2.9.1@aar') {
        transitive = true
    }

    // Debug dependencies

    // junit is only for mockwebserver
    debugImplementation "com.squareup.okhttp3:mockwebserver:${okhttp_version}"
    debugImplementation 'junit:junit:4.12'
    debugImplementation (project(':lib:mocked:mocke3')) {
        transitive = false
    }

    def stethoVersion = '1.5.0'
    debugImplementation "com.facebook.stetho:stetho:${stethoVersion}"
    debugImplementation "com.facebook.stetho:stetho-okhttp3:${stethoVersion}"

    def chuckVersion='1.1.0'
    debugImplementation ("com.readystatesoftware.chuck:library:${chuckVersion}"){
        exclude group: 'com.android.support'
    }
    debugImplementation "com.squareup.okhttp3:logging-interceptor:${okhttp_version}"

    // Test dependencies
    testImplementation 'junit:junit:4.12'
    testImplementation ("org.robolectric:robolectric:${robolectric_version}") {
        exclude group: 'org.bouncycastle'
    }
    testImplementation "org.robolectric:shadows-multidex:${robolectric_version}"
    testImplementation "org.robolectric:shadows-supportv4:${robolectric_version}"
    testImplementation "org.mockito:mockito-core:${mockito_version}"
    testImplementation 'org.khronos:opengl-api:gl1.1-android-2.1_r1' // required to fill robolectric gap: https://github.com/robolectric/robolectric/issues/1932

    testImplementation("android.arch.core:core-testing:$lifecyle_version", {
        exclude group: 'com.android.support', module: 'support-compat'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-core-utils'
    })

    def espressoVersion = '3.0.1'
    androidTestImplementation ('com.android.support.test:runner:1.0.1') {
        exclude group: 'com.android.support'
    }
    androidTestImplementation ('com.android.support.test:rules:1.0.1') {
        exclude group: 'com.android.support'
    }
    androidTestImplementation ("com.android.support.test.espresso:espresso-core:${espressoVersion}"){
        exclude group: 'com.android.support'
        exclude group: 'javax.inject'
    }
    androidTestImplementation ("com.android.support.test.espresso:espresso-contrib:${espressoVersion}"){
        exclude group: 'com.android.support'
        exclude group: 'javax.inject'
    }
    androidTestImplementation ("com.android.support.test.espresso:espresso-intents:${espressoVersion}") {
        exclude group: 'com.android.support'
    }
    androidTestImplementation ("com.android.support.test.espresso:espresso-web:${espressoVersion}") {
        exclude group: 'com.android.support'
    }

    androidTestImplementation fileTree(dir: 'libs', include: [
            'spoon-client-1.1.3-EXP.jar',
    ])
    androidTestImplementation "com.google.dexmaker:dexmaker-mockito:1.2"
    androidTestImplementation 'info.cukes:cucumber-android:1.2.5'
    androidTestImplementation 'info.cukes:cucumber-picocontainer:1.2.5'
    androidTestImplementation 'info.cukes:cucumber-html:0.2.6'
    androidTestImplementation "tools.fastlane:screengrab:1.2.0"
    androidTestImplementation "com.android.support:support-annotations:${rootProject.ext.supportLibVersion}"
    androidTestImplementation 'com.linkedin.testbutler:test-butler-library:1.3.2'
}

if (!project.ext.has("cucumberInstrumentation")) {
    apply plugin: 'com.google.gms.google-services'
}

android {
    baseFeature true

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    useLibrary 'org.apache.http.legacy'
    flavorDimensions "default"

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    dexOptions {
        javaMaxHeapSize "2g"
    }

    lintOptions {
        disable 'NewerVersionAvailable'
        disable 'TypographyQuotes'
        checkReleaseBuilds false
        checkGeneratedSources true
        checkDependencies true
        showAll true
        lintConfig file("lint.xml")
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    signingConfigs {
        debug {
            storeFile file("../common/debug.keystore")
        }

        release {
            /* We will provide these values using -P commandline option of gradle
             * or using a .properties file, defaults are defined in gradle.properties
             */
            storeFile file(GradleUtil.getPropertyWithDefault(project, RELEASE_STORE_FILE, "."))
            storePassword GradleUtil.getPropertyWithDefault(project, RELEASE_STORE_PASSWORD, "")
            keyAlias GradleUtil.getPropertyWithDefault(project, RELEASE_KEY_ALIAS, "")
            keyPassword GradleUtil.getPropertyWithDefault(project, RELEASE_KEY_PASSWORD, "")
        }
    }

    defaultConfig {

        def major = 18
        def minor = 26
        def patch = 0
        def build = 0
        versionCode GradleUtil.versionCode(major, minor, patch, build)
        versionName GradleUtil.versionName(major, minor, patch, build)

        minSdkVersion 21
        targetSdkVersion 25

        multiDexEnabled = true
        testApplicationId "com.expedia.bookings.test"

        def testRunnerPackage = "com.expedia.bookings.test.espresso.InstrumentationTestRunner"

        //Set testRunnerPackage to com.expedia.bookings.test.CucumberInstrumentationRunner to run cucumber tests
        if (project.ext.has("cucumberInstrumentation")) {
            testRunnerPackage = "com.expedia.bookings.test.CucumberInstrumentationRunner"
        }

        testInstrumentationRunner testRunnerPackage
        manifestPlaceholders = [instrumentationRunnerPath : testRunnerPackage]

        buildConfigField "String", "GIT_REVISION",  "\"${gitRev}\""
        buildConfigField "String", "BUILD_NUMBER",  "\"${System.env.BUILD_NUMBER}\""
        buildConfigField "boolean", "IS_SCREENSHOT_BUILD", project.hasProperty("SCREENSHOT_BUILD") ? "Boolean.parseBoolean(\"true\")" : "Boolean.parseBoolean(\"false\")"
        buildConfigField "boolean", "ITIN_SCREENSHOT_BUILD", project.hasProperty("ITIN_SCREENSHOT_BUILD") ? "Boolean.parseBoolean(\"true\")" : "Boolean.parseBoolean(\"false\")"

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }
    }

    productFlavors {
        expedia {
            buildConfigField "String", "brand", "\"Expedia\""
            buildConfigField "String", "MEDIA_URL", "\"https://images.trvl-media.com\""
            buildConfigField "String", "DEEPLINK_SCHEME", "\"expda\""
            buildConfigField "String", "USER_AGENT", "\"ExpediaBookings\""

            // Explicitly define the languages we use so GPS and other libraries doesn't include unnecessary ones
            resConfigs "da", "de", "en_CA", "en_GB", "es", "es_ES", "fi", "fr", "fr_CA", "in", "it", "ja", "ko", "nb", "nl", "pt_BR", "sv", "th", "vi", "zh", "zh_HK", "zh_TW"
        }

        ebookers {
            buildConfigField "String", "brand", "\"ebookers\""
            buildConfigField "String", "MEDIA_URL", "\"https://images.trvl-media.com\""
            buildConfigField "String", "DEEPLINK_SCHEME", "\"bukr\""
            buildConfigField "String", "USER_AGENT", "\"Ebookers\""

            resConfigs "de", "en_GB", "fi", "fr"
        }

        voyages {
            buildConfigField "String", "brand", "\"Agence Voyages-SNCF.com\""
            buildConfigField "String", "MEDIA_URL", "\"https://images.trvl-media.com\""
            buildConfigField "String", "DEEPLINK_SCHEME", "\"vygs\""
            buildConfigField "String", "USER_AGENT", "\"VSC\""

            resConfigs "fr"
        }

        travelocity {
            buildConfigField "String", "brand", "\"Travelocity\""
            buildConfigField "String", "MEDIA_URL", "\"https://images.trvl-media.com\""
            buildConfigField "String", "DEEPLINK_SCHEME", "\"tvly\""
            buildConfigField "String", "USER_AGENT", "\"TVLY\""

            resConfigs "en_CA", "fr_CA"
        }

        airAsiaGo {
            buildConfigField "String", "brand", "\"AirAsiaGo\""
            buildConfigField "String", "MEDIA_URL", "\"https://images.trvl-media.com\""
            buildConfigField "String", "DEEPLINK_SCHEME", "\"aago\""
            buildConfigField "String", "USER_AGENT", "\"AirAsiaGo\""

            resConfigs "th", "zh", "zh_HK", "in", "ja"
        }

        wotif {
            buildConfigField "String", "brand", "\"Wotif\""
            buildConfigField "String", "MEDIA_URL", "\"https://images.trvl-media.com\""
            buildConfigField "String", "DEEPLINK_SCHEME", "\"wotf\""
            buildConfigField "String", "USER_AGENT", "\"Wotif\""

            resConfigs "en"
        }

        lastMinute {
            buildConfigField "String", "brand", "\"LM AU & NZ\""
            buildConfigField "String", "MEDIA_URL", "\"https://images.trvl-media.com\""
            buildConfigField "String", "DEEPLINK_SCHEME", "\"ltmn\""
            buildConfigField "String", "USER_AGENT", "\"LM\""

            resConfigs "en"
        }

        orbitz {
            buildConfigField "String", "brand", "\"Orbitz\""
            buildConfigField "String", "MEDIA_URL", "\"https://images.trvl-media.com\""
            buildConfigField "String", "DEEPLINK_SCHEME", "\"obtz\""
            buildConfigField "String", "USER_AGENT", "\"Orbitz\""

            resConfigs "en", "es"
        }

        cheapTickets {
            buildConfigField "String", "brand", "\"CheapTickets\""
            buildConfigField "String", "MEDIA_URL", "\"https://images.trvl-media.com\""
            buildConfigField "String", "DEEPLINK_SCHEME", "\"hptk\""
            buildConfigField "String", "USER_AGENT", "\"CheapTickets\""

            resConfigs "en"
        }

        mrJet {
            buildConfigField "String", "brand", "\"MrJet\""
            buildConfigField "String", "MEDIA_URL", "\"https://images.trvl-media.com\""
            buildConfigField "String", "DEEPLINK_SCHEME", "\"mret\""
            buildConfigField "String", "USER_AGENT", "\"MrJet\""

            resConfigs "sv"
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled = GradleUtil.shouldEnableTestCoverage(project)

            minifyEnabled shouldRunProguard
            proguardFile file('proguard.cfg')
            testProguardFile file('proguard.cfg')

            ext.betaDistributionReleaseNotesFilePath = CHANGELOG_PATH
            ext.betaDistributionGroupAliasesFilePath = CRASHLYTICS_BETA_GROUPS_PATH
            ext.alwaysUpdateBuildId = GradleUtil.isJenkinsBuild()

            buildConfigField "boolean", "RELEASE", "Boolean.parseBoolean(\"false\")"
            buildConfigField "boolean", "USABILITY", GradleUtil.isUsabilityBuild(project) ? "Boolean.parseBoolean(\"true\")" : "Boolean.parseBoolean(\"false\")"
        }

        release {
            minifyEnabled true
            proguardFile file('proguard.cfg')
            zipAlignEnabled true
            signingConfig signingConfigs.release

            buildConfigField "boolean", "RELEASE", "true"
            buildConfigField "boolean", "USABILITY", GradleUtil.isUsabilityBuild(project) ? "true" : "false"
        }
    }

    sourceSets {

        debug {
            assets.srcDirs += '../lib/mocked/templates'
        }

        test {
            java.srcDir '../lib/ExpediaBookings/src/test/java/com/expedia/bookings/data'
            java.srcDir '../lib/ExpediaBookings/src/test/java/com/expedia/bookings/testrule'
        }

        androidTest {
            assets.srcDirs = ['src/androidTest/assets']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    checkstyle {
        toolVersion = "${checkstyle_version}"
    }

    task checkstyle(type: Checkstyle) {
        configFile file('checkstyle.xml')
        source 'src/'
        include '**/*.java'

        classpath = files()
        ignoreFailures = false
    }

    task generateDummyFileToHandleKotlinLintError(type: Exec) {
        executable "../tools/create_dummy_file.sh"
        args "${buildDir}"
    }
}

androidExtensions {
    experimental = true
}

public class GradleUtil {
    static def isDefined(s) {
        return s != null && !s.isEmpty() && s != "null"
    }

    static def shouldEnableProguard(Project project) {
        return shouldEnableOnJenkinsOrIfManuallyEnabled(project, "runProguard")
    }

    static def shouldEnableTestCoverage(Project project) {
        return shouldEnableOnJenkinsOrIfManuallyEnabled(project, "enableTestCoverage")
    }

    private static def shouldEnableOnJenkinsOrIfManuallyEnabled(Project project, String manualEnableKey) {
        def boolean shouldEnable = false

        if (isJenkinsBuild()) {
            shouldEnable = true
        }

        // This setting supercedes BUILD_NUMBER
        if (project.hasProperty(manualEnableKey)) {
            shouldEnable = project.getProperty(manualEnableKey).toBoolean()
        }

        return shouldEnable
    }

    static def getPropertyWithDefault(Project project, String key, String defaultValue) {
        if (project.hasProperty(key)) {
            return project.getProperty(key).toString()
        }

        return defaultValue
    }

    static def getBuildIdentifier(Project project) {
        return getPropertyWithDefault(project, "id", "debug")
    }

    static def isJenkinsBuild() {
        def buildNumber = "${System.env.BUILD_NUMBER}"
        def ci = "${System.env.CI}"

        return isDefined(buildNumber) || isDefined(ci)
    }

    static def getAppName(Project project, variant) {
        // Don't touch release builds
        if (variant.buildType.name == "release" || isUsabilityBuild(project)) {
            return null
        }

        def flavor = variant.productFlavors.get(0).name
        flavor = flavor.capitalize()

        def type = variant.buildType.name
        if (type == "debug") {
            type = getBuildIdentifier(project)
        }
        type = type.capitalize()

        def appname = flavor + " " + type
        return appname.tr('_', '.')
    }

    static def isUsabilityBuild(Project project) {
        return getBuildIdentifier(project) == "usability"
    }

    static def getGitRevision() {
        def hash = "git rev-parse --short HEAD".execute().text.trim()
        def hasLocalChanges = "git diff --raw".execute().text
        if (hasLocalChanges) {
            hash = "!" + hash
        }
        return hash
    }

    static def versionCode(major, minor, patch, build) {
        return major * 1000000 + minor * 10000 + patch * 100 + build
    }

    static def versionName(major, minor, patch, build) {
        def name = "${major}.${minor}.${patch}"
        if (build > 0) {
            name = "${name}.${build}"
        }
        return name
    }
}

afterEvaluate {
    android.featureVariants.all { variant ->
        if (variant.name == 'expediaDebug') {
            def lintTask = tasks["lintExpediaDebug"]
            def generateSourcesTask = tasks["compileExpediaDebugSources"]
            lintTask.dependsOn generateDummyFileToHandleKotlinLintError
            generateDummyFileToHandleKotlinLintError.dependsOn generateSourcesTask
        }
    }
}
