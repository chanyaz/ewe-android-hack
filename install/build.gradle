def shouldRunProguard = GradleUtil.shouldEnableProguard(project)
def CHANGELOG_PATH = "changelog.txt"
def CRASHLYTICS_BETA_GROUPS_PATH = "jenkins/crashlytics_beta_groups.txt"


apply plugin: 'com.android.application'

apply plugin: 'com.shazam.fork'
apply plugin: 'com.shazam.fork.reporter.jenkins'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    maven { url "https://github.com/carnivalmobile/maven-repository/raw/master/" }
    google()
}

android {
    compileSdkVersion 27

    flavorDimensions "default"

    defaultConfig {
        applicationId "com.expedia.bookings.install"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"

        multiDexEnabled = true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    productFlavors {
        expedia {
            applicationId "com.expedia.bookings"
        }

        ebookers {
            applicationId "com.ebookers"
        }

        voyages {
            applicationId "com.expedia.bookings.vsc"
        }

        travelocity {
            applicationId "com.travelocity.android"
        }

        airAsiaGo {
            applicationId "com.airasiago.android"
        }

        wotif {
            applicationId "com.wotif.android"
        }

        lastMinute {
            applicationId "com.lastminute.android"
        }

        orbitz {
            applicationId "com.orbitz"
        }

        cheapTickets {
            applicationId "com.cheaptickets"
        }

        mrJet {
            applicationId "se.mrjet"
        }
    }

    signingConfigs {
        debug {
            storeFile file("../common/debug.keystore")
        }

        release {
            /* We will provide these values using -P commandline option of gradle
             * or using a .properties file, defaults are defined in gradle.properties
             */
            storeFile file(GradleUtil.getPropertyWithDefault(project, RELEASE_STORE_FILE, "."))
            storePassword GradleUtil.getPropertyWithDefault(project, RELEASE_STORE_PASSWORD, "")
            keyAlias GradleUtil.getPropertyWithDefault(project, RELEASE_KEY_ALIAS, "")
            keyPassword GradleUtil.getPropertyWithDefault(project, RELEASE_KEY_PASSWORD, "")
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled = GradleUtil.shouldEnableTestCoverage(project)

            applicationIdSuffix ("." + GradleUtil.getBuildIdentifier(project))

            minifyEnabled shouldRunProguard
            proguardFile file('proguard.cfg')
            testProguardFile file('proguard.cfg')

            ext.betaDistributionReleaseNotesFilePath = CHANGELOG_PATH
            ext.betaDistributionGroupAliasesFilePath = CRASHLYTICS_BETA_GROUPS_PATH
            ext.alwaysUpdateBuildId = GradleUtil.isJenkinsBuild()

            buildConfigField "boolean", "RELEASE", "Boolean.parseBoolean(\"false\")"
            buildConfigField "boolean", "USABILITY", GradleUtil.isUsabilityBuild(project) ? "Boolean.parseBoolean(\"true\")" : "Boolean.parseBoolean(\"false\")"
        }

        release {
            if (GradleUtil.isUsabilityBuild(project) || !GradleUtil.isJenkinsBuild()) {
                applicationIdSuffix ("." + GradleUtil.getBuildIdentifier(project))
            }

            minifyEnabled true
            proguardFile file('proguard.cfg')
            zipAlignEnabled true
            signingConfig signingConfigs.release

            buildConfigField "boolean", "RELEASE", "true"
            buildConfigField "boolean", "USABILITY", GradleUtil.isUsabilityBuild(project) ? "true" : "false"
        }
    }

    fork {
        testPackage = GradleUtil.getPropertyWithDefault(project, 'package', "com.expedia.bookings.test")
        totalAllowedRetryQuota = 99
        retryPerTestCaseQuota = 2
        testOutputTimeout = 90000
        // Workaround to run tests in parallel on all connected devices. It should run on all devices above api level 19.
        poolingStrategy {
            computed {
                characteristic = "api"
                groups {
                    connected_devices = 19
                }
            }
        }
    }

    forkJenkins {
        reportTitle = "EBad UI tests Flakyness Report"
        jenkinsUrl = "https://jenkins-ewe-mobile-android-master.tools.expedia.com"
        jenkinsUsername = GradleUtil.getPropertyWithDefault(project, 'jenkinsUsername', "")
        jenkinsPassword = GradleUtil.getPropertyWithDefault(project, 'jenkinsPassword', "")
        jenkinsReportTitle = "Fork Report"
        freestyleJob {
            jobName = "EBad-PullRequests-UITests"
        }
    }

}


def releaseAccountTokens = [
        'com.expedia.bookings' : 'expedia.tuid',
        'com.expedia.bookings.vsc' : 'vsc.tuid',
        'com.travelocity.android' : 'travelocity.tuid',
]

android.applicationVariants.all { variant ->
    // We released apps with the following tokens so we should maintain them so people don't get logged out
    def token = releaseAccountTokens[variant.applicationId]
    if (!GradleUtil.isDefined(token)) {
        token = "${variant.applicationId}.tuid"
    }
    variant.resValue "string", "expedia_account_token_type_tuid_identifier", "${token}"
    variant.resValue "string", "expedia_account_type_identifier", "${variant.applicationId}"
    variant.resValue "string", "authority_account_sync", "${variant.applicationId}.account.sync"

    def launcherName = GradleUtil.getAppName(project, variant)
    if (!GradleUtil.isDefined(launcherName)) {
        // Must be a release build, so we default to app_name
        launcherName = "@string/app_name"
    }
    variant.resValue "string", "launcher_name", "${launcherName}"

    variant.mergeAssets.doLast {
        delete(fileTree(dir: variant.mergeAssets.outputDir, includes: sharedDataFilesToRemove(variant)))
    }
}

dependencies {
    implementation fileTree(dir: "$project.rootDir/project/libs", include: ['*.jar'])

    implementation project(':project')
}

public class GradleUtil {
    static def isDefined(s) {
        return s != null && !s.isEmpty() && s != "null"
    }

    static def shouldEnableProguard(Project project) {
        return shouldEnableOnJenkinsOrIfManuallyEnabled(project, "runProguard")
    }

    static def shouldEnableTestCoverage(Project project) {
        return shouldEnableOnJenkinsOrIfManuallyEnabled(project, "enableTestCoverage")
    }

    private static def shouldEnableOnJenkinsOrIfManuallyEnabled(Project project, String manualEnableKey) {
        def boolean shouldEnable = false

        if (isJenkinsBuild()) {
            shouldEnable = true
        }

        // This setting supercedes BUILD_NUMBER
        if (project.hasProperty(manualEnableKey)) {
            shouldEnable = project.getProperty(manualEnableKey).toBoolean()
        }

        return shouldEnable
    }

    static def getPropertyWithDefault(Project project, String key, String defaultValue) {
        if (project.hasProperty(key)) {
            return project.getProperty(key).toString()
        }

        return defaultValue
    }

    static def getBuildIdentifier(Project project) {
        return getPropertyWithDefault(project, "id", "debug")
    }

    static def isJenkinsBuild() {
        def buildNumber = "${System.env.BUILD_NUMBER}"
        def ci = "${System.env.CI}"

        return isDefined(buildNumber) || isDefined(ci)
    }

    static def getAppName(Project project, variant) {
        // Don't touch release builds
        if (variant.buildType.name == "release" || isUsabilityBuild(project)) {
            return null
        }

        def flavor = variant.productFlavors.get(0).name
        flavor = flavor.capitalize()

        def type = variant.buildType.name
        if (type == "debug") {
            type = getBuildIdentifier(project)
        }
        type = type.capitalize()

        def appname = flavor + " " + type
        return appname.tr('_', '.')
    }

    static def isUsabilityBuild(Project project) {
        return getBuildIdentifier(project) == "usability"
    }

    static def getGitRevision() {
        def hash = "git rev-parse --short HEAD".execute().text.trim()
        def hasLocalChanges = "git diff --raw".execute().text
        if (hasLocalChanges) {
            hash = "!" + hash
        }
        return hash
    }

    static def versionCode(major, minor, patch, build) {
        return major * 1000000 + minor * 10000 + patch * 100 + build
    }

    static def versionName(major, minor, patch, build) {
        def name = "${major}.${minor}.${patch}"
        if (build > 0) {
            name = "${name}.${build}"
        }
        return name
    }
}

def sharedDataFilesToRemove(variant) {
    List<String> filesToRemove = new ArrayList<String>()
    android.productFlavors.all { flavor ->
        if (flavor.name != variant.productFlavors.get(0).name) {
            if (flavor.name == 'travelocity') {
                filesToRemove.add('ExpediaSharedData/TravelocityPointOfSaleConfig.json')
                filesToRemove.add('ExpediaSharedData/TVLYServerURLs.json')
            }
            else if (flavor.name == 'voyages') {
                filesToRemove.add('ExpediaSharedData/VSCPointOfSaleConfig.json')
                filesToRemove.add('ExpediaSharedData/VSCServerURLs.json')
            }
            else {
                filesToRemove.add('ExpediaSharedData/' + flavor.name.capitalize().concat('PointOfSaleConfig.json'))
                filesToRemove.add('ExpediaSharedData/' + flavor.name.capitalize().concat('ServerURLs.json'))
            }
        }
    }
    filesToRemove.add('ExpediaSharedData/validate.sh')
    return filesToRemove
}

