apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    jcenter()
}

dependencies {
    implementation 'joda-time:joda-time:2.8.1'
    implementation "com.squareup.okhttp3:okhttp:${okhttp_version}"
    implementation "com.squareup.okhttp3:logging-interceptor:${okhttp_version}"
    implementation "com.squareup.okhttp3:okhttp-urlconnection:${okhttp_version}"
    implementation 'com.squareup.okio:okio:1.14.0'
    implementation "com.squareup.retrofit2:retrofit:${retrofit_version}"
    implementation "com.squareup.retrofit2:converter-gson:${retrofit_version}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${retrofit_version}"
    implementation "io.reactivex.rxjava2:rxjava:${rxjava_version}"
    implementation 'org.json:json:20140107'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}"
    testImplementation "org.jetbrains.kotlin:kotlin-test:${kotlin_version}"

    testImplementation "com.squareup.okhttp3:mockwebserver:${okhttp_version}"
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.assertj:assertj-core:2.0.0'
    testImplementation (project(':lib:mocked:mocke3')) {
        transitive = false
    }
}

compileJava {
    options.compilerArgs.addAll(['-Xlint:unchecked', '-Xlint:deprecation'])
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled true
        html.destination file("${buildDir}/jacocoHtml")
    }
}

checkstyle {
    toolVersion = "${checkstyle_version}"
}

task checkstyle(type: Checkstyle) {
    configFile rootProject.file('project/checkstyle.xml')
    source 'src/'
    include '**/*.java'

    classpath = files()
    ignoreFailures = false
}
