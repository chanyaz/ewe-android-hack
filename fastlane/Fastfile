# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.8.0"

default_platform :android

platform :android do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
  end

  desc "Run a competitor app startup time comparison"
  lane :measure_startup_time do
    # Build
    gradle(task: "clean assembleExpediaDebug assembleExpediaDebugAndroidTest")

    # Prepare device
    adb(command: "install -r project/build/outputs/apk/expedia/debug/project-expedia-debug.apk")
    adb(command: "install -r project/build/outputs/apk/androidTest/expedia/debug/project-expedia-debug-androidTest.apk")

    # Run competitor startup time test
    adb(command: "shell am instrument -w -r   -e debug false -e class com.expedia.bookings.test.espresso.CompetitorStartupTimeTest com.expedia.bookings.test/com.expedia.bookings.test.espresso.InstrumentationTestRunner")

    # Retrieve Data
    adb(command: "shell run-as com.expedia.bookings.debug cat files/startupTime/competitorStartupTimeResults.txt")
    adb(command: "shell run-as com.expedia.bookings.debug rm files/startupTime/competitorStartupTimeResults.txt")
  end

  desc "Run a marketing screenshot sweep"
  lane :screenshots do |options|
    # Build
    gradle(task: "assembleExpediaDebug assembleExpediaDebugAndroidTest", flags: "-PSCREENSHOT_BUILD")

    # Prepare device
    adb(command: "install -r project/build/outputs/apk/expedia/debug/project-expedia-debug.apk")
    adb(command: "shell settings put secure location_providers_allowed -network")
    adb(command: "shell settings put secure location_providers_allowed -gps")
    adb(command: "shell pm grant com.expedia.bookings.debug android.permission.ACCESS_COARSE_LOCATION")
    adb(command: "shell pm grant com.expedia.bookings.debug android.permission.ACCESS_FINE_LOCATION")
    adb(command: "shell pm grant com.expedia.bookings.debug android.permission.DUMP")

    # Run screenshots with options
    if options == {} || (options[:packages].is_a?(NilClass) && options[:classes].is_a?(NilClass))
      options[:packages] = 'com.expedia.bookings.screengrab' #fallback to default package
    end

    screengrab(
        use_tests_in_packages: options[:packages],
        use_tests_in_classes: options[:classes],
        locales: options[:locales]
    )

    # Reset device
    demo_mode(enable: false)
  end

  desc "Upload release to Google Play"
  lane :release do |options|
    # determine version code of new APK
    version_code = get_apk_version_code(apk_file: options[:apk_file])

    # prepare release notes
    import_localized_release_notes(csv_file: options[:csv_file], version_code: version_code)

    # upload
    #supply()
  end

  desc "Create a new release branch and bump the version on the base branch. Optionally protects the newly created release branch."
  lane :branch_and_bump do |options|
    curr_version = sh "cd .. && perl tools/extract_version.pl project/build.gradle"
    if curr_version == ''
      UI.error("Could not calculate the current version")
      raise "Could not calculate current version"
    end

    base_branch = options.fetch(:base, "develop")
    release_branch = "r/#{options[:flavor]}-#{curr_version}"
    pr_branch = "i/version-bump-#{options[:flavor]}-#{options[:new_version]}"

    # Check out latest code on base branch
    ensure_git_status_clean
    ensure_git_branch(branch: base_branch)
    sh "git pull --rebase origin #{base_branch}"
    ensure_git_status_clean

    # Create, push and (optionally) protect branch
    sh "git checkout -b " + release_branch
    push_to_git_remote(local_branch: release_branch)
    if options[:protect_with_checks]
      protect_branch(api_token: ENV["GITHUB_TOKEN"], repo: "ExpediaInc/ewe-android-eb", branch: release_branch, required_checks: options[:protect_with_checks])
    end

    # Create branch for version bump
    sh "git checkout #{base_branch}"
    sh "git pull --rebase origin #{base_branch}"
    sh "git checkout -b #{pr_branch}"

    # Bump version
    sh "cd .. && perl tools/change_version.pl project/build.gradle #{options[:new_version]}"

    # Create pull request
    git_commit(path: "project/build.gradle", message: "version bump")
    push_to_git_remote(local_branch: pr_branch)
    create_pull_request(api_token: ENV["GITHUB_TOKEN"], repo: "ExpediaInc/ewe-android-eb", title: "version bump #{options[:new_version]}", head: pr_branch, base: base_branch)

    sh "git checkout #{base_branch}"
    save_created_branch_name_to_file(release_branch)
  end

  # You can define as many lanes as you want

  desc "Runs tests with usage of emulator plugin"
    lane :automation_integrationTests do

    automated_test_emulator_run(
        AVD_setup_path: "fastlane/AVD_configs/AVD_config.json",
        shell_task: "./jenkins/fork.sh",
        AVD_param_launch_timeout: "180",
        AVD_adb_launch_timeout: "300",
        AVD_recreate_new: "true"
    )
    end

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end

def save_created_branch_name_to_file(branch_name)
  metadata_path = File.join("metadata", "android")
  filename = "#{metadata_path}/created_branch.properties"
  dirname = File.dirname(filename)
  unless File.directory?(dirname)
    FileUtils.mkdir_p(dirname)
  end

  File.open(filename, "w") { |file|
    file.puts("CREATED_BRANCH=#{branch_name}")
  }
end

# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md

# fastlane reports which actions are used
# No personal data is sent or shared. Learn more at https://github.com/fastlane/enhancer
